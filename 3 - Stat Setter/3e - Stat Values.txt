

Data all about stats.


=============================================================================
== /VALUES  =================================================================

Hey, what's valid for this stat!  (a basic lookup command)

stat [<type(s) & flag(s)>/]<stat>

--

0: Stat to look up (or <stat>* for list)

qa: type(s) to check for
qt: tag(s) to check for
qv: value(s) to check for - if an 'or' list, must be x.y.z
qw: what stat to check for

qf: "prerequisite" filter flag ("filter by prereqs for char")
qq: dbref of sheet

qp: Stat path without checking
qn: Prettified name
qs: Stat information
qd: Default for stat, if any
qr: Prerequisites, if any

qz: temp holder
qy: dbref: stat-funcs (sfp)
qx: dbref: data dictionary (dd)

--

&f.stat/values Stat Setter <ss>=
strcat( 

@@ >> blank out registers we use to collect data; had some problems without this
	setq( a, ), setq( t, ), setq( v, ), setq( f, ), 
	setq( y, u( d.stat-funcs )), 
	setq( q, u( %qy/f.find-sheet, %# )), 
	setq( x, u( d.data-dictionary )), 

@@ >> search for type(s) and/or tag(s)
	if( strmatch( %0, */* ), 
		strcat( 
			setq( w, rest( %0, / )), 
			iter( before( %0, / ), 
				case( 1, 

@@ Removing "prereq/*" ability because it kept hitting iteration limits
@@ @@ .. .. "prerequisite": flag for the filter, only if player has sheet
@@ 					cand( 
@@ 						strmatch( %i0, pre* ), 
@@ 						t( %qq )
@@ 					), 
@@ 					setq( f, 1 ), 

@@ .. .. "v*=*": value of stat is 'x'.
					strmatch( %i0, v*=* ), 
					setq( v, edit( last( %i0, = ), _, %b )), 

@@ .. .. search matches type: look for stat types to search for (name complete)
					t( setr( z, grab( u( %qy/d.search-order ), %i0* ))), 
					setq( a, %qa %qz ), 

@@ .. .. search matches template: filter on template-only (name complete)
					t( setr( z, grab( u( %qx/bio.template ), %i0*, .))), 
					setq( t, %qt.[edit( %qz, _, %b )] ), 

@@ .. .. search matches unknown, assume tag: no name completion
					setq( t, %qt.[edit( %i0, _, %b )] )
				), 
				, @@
			)
		), 
@@ .. else: no types/tags
		setq( w, %0 )
	), 

@@ .. clean-up (no leading periods with tags list)
	setq( t, trim( %qt, b, . )), 

@@ >> find 'statpath without instance', then filter them as appropriate
	setq( p, u( %qy/f.statpath-validate-name, %qw )), 


@@ @@ >> "prerequisite" flag (qf) was set -- removing functionality 'cause limit
@@ 	if(
@@ 		t( %qf ), 
@@ 		setq( p, localize( filter( fil.prerequisites, %qp, , , %qq )))
@@ 	), 

@@ >> filter: stat types (qa) -> qp
	if(
		t( %qa ), 
		setq( p, filter( %qy/fil.list-stats-types, %qp, , , %qa ))
	), 

@@ >> filter: tags (qt) -> qp
	if(
		t( %qt ), 
		setq( p, filter( %qy/fil.list-stats-tags, %qp, , , %qt, 1 ))
	), 

@@ >> filter: values (qv) -> qp
	if(
		t( %qv ), 
		setq( p, filter( %qy/fil.list-stats-values, %qp, , , %qv ))
	), 

@@ >> grab name -> qn
	setq( n, u( %qy/f.statname.workhorse, rest( %qp, . ))), 

@@ >> grab stat(s) -> qs
	setq( s, get( %qx/%qp )), 

@@ >> check that a good stat was pulled, and output
	case( 1, 

@@ .. .. display: one match
		cand( t( %qp ), eq( words( %qp ), 1 )), 
		u( display.stat.values.display.one ), 

@@ .. .. error if too many matches
@@ .. .. (had been sigsegv'ing in the display portion on 2.7, so limited to 40)
@@ .. .. (http://code.google.com/p/tinymux/issues/detail?id=637)
		gt( words( %qp ), 200 ), 
		[alert( stat )] Over two hundred matches. Please refine your search., 

@@ .. .. display: Multiple Matches
		cand( t( %qp ), gt( words( %qp ), 1 )), 
		u( display.stat.values.display.multiple ), 

@@ .. .. bad stat
		Stat Not Found. Try <name>* to find a list of possible matches. 
	)
)


--------------------------------------------------------------------------------
-- Display: Value List ---------------------------------------------------------

This just displays what kind of values are good
0: value list from data dictionary

--

&display.stat-valuelist Stat Setter <ss>=case(%0, *, Any, #, Numeric, if(strmatch(%0, derived), Derived Formula, itemize(%0, ., if(t(%1), %1, and))))


--------------------------------------------------------------------------------
-- Display: Prereq List --------------------------------------------------------

0: statpath (probably unchecked)
Returns: <templates>|<chargen-only>|<other prereqs>

--

&display.stat-prereqlist Stat Setter <ss>=
strcat( 

@@ .. template prerequisites
	filter( 
		filter.stat-prereqlist.template, 
		u( [u( d.data-dictionary )]/bio.template ), ., ., %0 
	), |, 

@@ .. chargen-only prerequisite
	if(
		u( [u( d.stat-funcs )]/f.hastag?.workhorse, %0, chargen-only ), 
		Chargen-Only 
	), |, 

@@ .. coded/other prerequisites
	if(
		hasattr( u( d.data-dictionary ), prereq-text.%0 ), 
		u( [u( d.data-dictionary )]/prereq-text.%0 )
	)
)


--

think ulocal( ss/display.stat-prereqlist, merit.unseen_sense_() )
think ulocal( ss/display.stat-prereqlist, merit.eidetic_memory )


--------------------------------------------------------------------------------
-- Filter: Preqlist for Templates ----------------------------------------------

Returns Templates (%0) that match tags on Statpath (%1)

--

&filter.stat-prereqlist.template Stat Setter <ss>=u( [u( d.stat-funcs )]/f.hastag?.workhorse, %1, %0 )


--------------------------------------------------------------------------------
-- Display: One Match ----------------------------------------------------------

&display.stat.values.display.one Stat Setter <ss>=

@@ Header: <name> (<type>)
@@ .. add "<type>" if we see ()
	[header(
		[edit(%qn, %(%), %(<type>%))] 
		%[[ulocal([u(d.stat-funcs)]/f.statname.workhorse, first(%qp, .))]%]
	)] %r

	[vcolumns(
@@ >> COLUMN 1, width 42: values, prerequisites
		42:
@@ .. Values, and Defaults if they exist

			[ansi(h, Values)]: [u(display.stat-valuelist, first(%qs, |))]
@@ Defaults?
			[if(
				hasattr(u(d.data-dictionary), default.%qp), 
				`[ansi(h, Default)]: 
					[if(
						strmatch(
							setr(d, get([u(d.data-dictionary)]/default.%qp)),
							%[*%]
						), 
						Formula, 
						%qd
					)]
			)]
@@ .. Instances? (called "types" now)  Substats? (called "detail")
			[case(
				words(%qs, |), 
@@ .. .. if 3 validation items, instance & substats
				3, 
				`[ansi(h, Type)]: 
					[u(display.stat-valuelist, extract(%qs, 2, 1, |), or)]
				`[ansi(h, Details)]: 
					[u(display.stat-valuelist, last(%qs, |))], 
@@ .. .. if 2, check if instance, else substats
				2, 
				`[if(
					strmatch(%qp, *%(%)), 
					[ansi(h, Type)]: [u(display.stat-valuelist, rest(%qs, |), or)], 
					[ansi(h, Details)]: [u(display.stat-valuelist, rest(%qs, |))]
				)]
			)], 
@@ >> COLUMN 2, width 30: book/page reference
		30:
		[iter(
			u([u(d.stat-reference)]/page.%qp), 
			[rest(
				extract(
					u([u(d.stat-reference)]/d.book-lookup), 
					match(
						u([u(d.stat-reference)]/d.book-lookup), 
						[first(%i0, .)].*, 
						|
					), 
					1, |
				), 
				.
			)]: 
			[rest(%i0, .)], 
			,
			`
		)], 
@@ >> vcolumn foo
		`, %b[ansi(r, |)]%b, %b%b
	)]%r

@@ .. extra return if there's more information to come
	[setq(r, ulocal(display.stat-prereqlist, %qp))]
	[setq(n, ulocal([u(d.stat-reference)]/notes.%qp))]
	[if(or(t(%qr), t(%qn)), %r)]

@@ >> Prerequisites: <templates>.<chargen only>.<other>
@@ .. First: Templates
	[if(t(setr(x, first(%qr, |))), 
		[wrap(
			[ansi(h, Templates)]: [itemize(%qx, ., or)]%r, 
			76, left, %b%b
		)]%r
	)]
@@ .. Second: Chargen-Only
	[if(t(setr(x, extract(%qr, 2, 1, |))), 
		[wrap(
			[ansi(h, Chargen)]: [itemize(%qx, .)]%r, 
			76, left, %b%b
		)]%r
	)]

@@ .. Third: Other prerequisites
	[if(t(setr(x, last(%qr, |))), 
		[wrap(
			[ansi(h, Prerequisites)]: %qx%r, 
			76, left, %b%b
		)]%r
	)]

@@ >> Notes?
	[if(t(%qn), 
		[wrap(
			[ansi(h, Notes)]: %qn, 
			76, left, %b%b
		)]%r
	)]

@@ THE END (report if chargen-only)
	[footer(if(strmatch(get([u(d.data-dictionary)]/tags.%qp), *Chargen-Only*), Chargen Only))]


--------------------------------------------------------------------------------
-- Display: Multiple Matches ---------------------------------------------------

z: dbref: stat-funcs (sfp)
y: temporary finding all the names for max-length, below
m: max length of above, used for formatting of '<trait name> [<trait category>]'

--

&display.stat.values.display.multiple Stat Setter <ss>=
strcat( 
	setq( z, u( d.stat-funcs )), 
	setq( y, 
		iter( %qp, 
			edit( u( %qz/f.statname.workhorse, rest(%i0, .)), %(%), %(<type>%) ), 
			, | 
		)
	), 
	setq( m, last( sort( iter( %qy, strlen( %i0 ), | )))), 

	header( Matches for [if( t( rest( %0, / )), [first( %0, / )]/ )]%qw ), %r, 

	iter( %qp, 
		strcat( 
			%b%b, 
			ljust( 
				edit( u( %qz/f.statname.workhorse, rest(%i0, .)), 
					%(%), %(<type>%) 
				), 
				%qm 
			), 
			%b%b, 
			ansi( 
				xh, %[, 
				xh, u( %qz/f.statname.workhorse, first(%i0, .)), 
				xh, %] 
			)
		), 
		, %r
	), %r, 

	footer( [words( %qp )] Matches )
)


--------------------------------------------------------------------------------
-- Filter: Prerequisites -------------------------------------------------------

Filter to check %1's "template" and "other" stats

--

&fil.prerequisites Stat Setter <ss>=
	and(
@@ >> template check
		u([u(d.stat-funcs)]/f.prereq-check-template, %1, %0), 
@@ >> other check
@@ .. we need to check all instances on a stat, if they have any
		if(
			and(
				strmatch(%0, *_()), 
				not(member(extract(get([u(d.data-dictionary)]/%0), 2, 1, |), *))
			), 
			lor(
				iter(
					extract(get([u(d.data-dictionary)]/%0), 2, 1, |), 
					u([u(d.stat-funcs)]/f.prereq-check-other, %1, %0, %i0), 
					.
				)
			), 
@@ .. not instsanced, or instance validation was * which is never checked
			u([u(d.stat-funcs)]/f.prereq-check-other, %1, %0)
		)
	)

--

think filter(ss/fil.prerequisites, attribute.strength merit.unseen_sense_() merit.mantle_() skill.academics, , , pmatch(thenomain))


stat/v cour
stat/v court
stat/v str
stat/v ambi
stat/v dfsfdsfds
stat/v xp

stat/v str*

stat/v *stam*

stat/v *st?m*

stat/v cha merit/*

