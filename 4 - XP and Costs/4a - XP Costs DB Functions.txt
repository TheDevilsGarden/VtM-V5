################################################################################
## XP COST DATABASE ############################################################

xp.<stat category>
xp.<specific stat path>
If there's no general or no specific, it cannot be bought.
If the XP path's value is set to 0, it cannot be bought.

Buying stats must also follow Prerequeisites.

Following is sent from XP: 
	%0: dbref of sheet
	%1: from
	%2: to
	%3: name of stat, sans instance
	%4: value.list.of.statpath

XP Cost Databse <xpcd>: #388 

--

The exceptions would be much easier if we could break them down by template!
Perhaps:
	xp.merit.contacts~changeling

Or the like? So:
	udefault( xp.<statpath>~<template>, 
		udefault( xp.<category>~<template>, 
			udefault( xp.<statpath>, 
				u( xp.<category> )
			)
		)
	)

Might be easier:
	setq( x, 
		case( 
			hasattr( xp.<statpath>~<template> ), xp.<statpath>~<template>, 
			hasattr( xp.<category>~<template> ), xp.<category>~<template>, 
			hasattr( xp.<statpath> ), xp.<statpath>, 
			hasattr( xp.<category> ), xp.<category>, 
			
		)
	)
	
	u( %qx, ... )

If multiple templates need to be checked, make one attribute per template.
No, it's not ideal. Yes, it will have to do.
		


*** NOTE: Change 'cost.xxx' to simply 'cost.xxx'.



================================================================================
== LMAX/LMIN ===================================================================

This version of lmax/lmin would need wiz-privileged, and I don't feel like exposing it to side-effect functions

At this point the game should have lmax() and lmin() anyhow.

--

&.lmax XP Cost Databse <xpcd>=fold(.lmax.fold, %0)
&.lmax.fold XP Cost Databse <xpcd>=max(%0, %1)

&.lmin XP Cost Databse <xpcd>=fold(.lmin.fold, %0)
&.lmin.fold XP Cost Databse <xpcd>=min(%0, %1)



================================================================================
== CALCULATION FUNCTIONS =======================================================

These mimic the functions on the DD.
(why only mimic? why aren't we using those functions?)

--

&.value XP Cost Databse <xpcd>=first(u(%0/_%1), .)
&.at_least XP Cost Databse <xpcd>=gte(add(u(.value, %0, %1), %3), %2)
&.is XP Cost Databse <xpcd>=strmatch(%2, u(.value, %0, %1))


================================================================================
== COSTS CALCULATIONS ==========================================================

For all of these:

	0: xp cost
	1: from
	2: to
	3: stat's numeric value list (e.g., 2.4)
	4: slush, anything else that the calling 'xp.<attr>' needs to pass


--------------------------------------------------------------------------------
-- nWoD Standard XP Cost -------------------------------------------------------

	( L² - F² + F + L ) / 2

think [setq(f, 3)][setq(t, 4)][setq(x, 2)][setq(f, inc(%qf))][mul(add(power(%qt, 2), -[power(%qf, 2)], %qf, %qt), .5, %qx)]

--

&cost.standard XP Cost Databse <xpcd>=mul(add(power(%2, 2), mul(power(inc(%1), 2), -1), inc(%1), %2), .5, %0)


--------------------------------------------------------------------------------
-- nWoD Standard Without Phantom Dots XP Cost ----------------------------------

Needs to know the entire costs list. If cost is '#', send to 'cost.standard' 
instead of here.

think [setq(v, 1.3.4.5)][setq(f, 1)][setq(l, 4)][setq(x, 2)][ladd(iter(setinter(%qv, lnum(inc(%qf), %ql, .), .), mul(%qx, %i0), ., .), .)]

--

&cost.no-phantom-dots XP Cost Databse <xpcd>=ladd(iter(setinter(%3, lnum(inc(%1), %2, .), .), mul(%0, %i0), ., .), .)


--------------------------------------------------------------------------------
-- nWoD Direct-Level XP Cost ---------------------------------------------------

think [setq(t, 4)][setq(x, 2)][mul(%qt, %qx)]

--

&cost.direct XP Cost Databse <xpcd>=mul(%1, %0)


--------------------------------------------------------------------------------
-- nWoD Single-Cost XP Cost ----------------------------------------------------

think [setq(f, 4)][setq(t, 5)][setq(x, 8)][mul(%qx, sub(%qt, %qf))]

--

&cost.single XP Cost Databse <xpcd>=mul(%0, sub(%2, %1))


--------------------------------------------------------------------------------
-- Changeling Contracts-With-Instances Costs -----------------------------------

A little back-and-forth, here. Hopefully will unknot it.
Used for contracts that have an instance, such as Elements (<fill in blank>).

This only works 1 dot at a time, so we need to hit it a number of times
We concentrate on the 'to' numbers.  1 -> 3 would look at 2 then 3.

--

&cost.contract-with-instance XP Cost Databse <xpcd>=
ladd(iter(
	lnum(inc(%1), %2), 
	case(1, 
		lte(%i0, 
			u(.lmax, 
				iter(lattr(%0/_contract.%4_(*)), first(u(%0/%i0), .))
			)
		), 
@@ "semi-affinity" on the half-price rule rounds up
@@ (most of this is a Darkwater house rule)
		ceil(fdiv(u(xp.contract, %0, dec(%i0), %i0, %3), 2)), 
		u(xp.contract, %0, dec(%i0), %i0, %3)
	)
))
