/*
################################################################################
## WEREWOLF: THE FORSAKEN ######################################################

This file includes all additions to the system for Werewolf: The Forsaken 
core rules

################################################################################
## WEREWOLF: STAT FUNCTIONS ####################################################

--------------------------------------------------------------------------------
-- SFP: Search Order -----------------------------------------------------------

Level 2 for powers 
Level 3 for very minor items
*/

&d.search-order-02-werewolf sfp=renown gift
&d.search-order-03-werewolf sfp=rite




/*
################################################################################
## WEREWOLF: DATA DICTIONARY ###################################################



================================================================================
== DD: SETUP ===================================================================

Stuff we need to put on the Data Dictionary

*/

// CODP prefixes
&prefix.werewolf_-_gifts dd=gift.
&prefix.werewolf_-_gifts d:t=tags.gift.

&prefix.werewolf_-_rites dd=rite.
&prefix.werewolf_-_rites d:t=tags.rite.


// add to templates
@fo me=&bio.template dd=[get( dd/bio.template )].Werewolf.Wolf-Blooded


// register "max trait" statpath
&.max_trait.werewolf dd=advantage.primal_urge


// register "sphere"'s templates (could this be folded into 'templates'?)
&.sphere.werewolf dd=Werewolf Wolf-Blooded

// -- DD: Tags for Wolf-Blooded ------------------------------------------------

@edit d:t/tags.advantage.integrity=$, .wolf-blooded



/*
================================================================================
== WEREWOLF BIO ================================================================

&bio.xxx DD=...
&tags.bio.xxx D:T=werewolf
*/

&bio.pack DD=*
&tags.bio.pack D:T=werewolf.wolf-blooded.clique

&bio.blood DD=Alpha.Challenger.Destroyer.Fox.Monster.Soldier.
&tags.bio.blood D:T=werewolf

&bio.bone DD=Community Organizer.Cub.Guru.Hedonist.Lone Wolf.Wallflower
&tags.bio.bone D:T=werewolf

&bio.auspice DD=Cahalith.Elodoth.Irraka.Ithaeur.Rahu
&tags.bio.auspice D:T=werewolf

&bio.tribe DD=
	Blood Talons.Bone Shadows.Hunters in Darkness.Iron Masters.Storm Lords.
	Ghost Wolves
&default.bio.tribe DD=Ghost Wolves
&tags.bio.tribe D:T=werewolf



/*
================================================================================
== DATA DICTIONARY =============================================================

Werewolf Stat Checks - Move these to "Werewolf" when it comes out
	.Auspice_Skills	(?? should this be in cgen?)

	0: sheet dbref
	1: statpath to check
*/

&.Auspice_Skill_Check DD=
	t( setinter( 
		%1, 
		switch( u( .value_full, %0, bio.auspice ), 
			cahalith, skill.crafts skill.expression skill.persuasion, 
			elodoth, skill.empathy skill.investigation skill.politics, 
			irraka, skill.larceny skill.stealth skill.subterfuge, 
			ithaeur, skill.animal_ken skill.medicine skill.occult, 
			rahu, skill.brawl skill.intimidation skill.survival 
		)
	))



/*
================================================================================
== WEREWOLF ADVANTAGES =========================================================

&advantage.xxx DD=
&tags.advantage.xxx D:T=werewolf
*/

&advantage.harmony DD=1.2.3.4.5.6.7.8.9.10
&default.advantage.harmony DD=7
&tags.advantage.harmony D:T=integrity.werewolf

&advantage.primal_urge DD=1.2.3.4.5.6.7.8.9.10
&default.advantage.primal_urge DD=1
&tags.advantage.primal_urge D:T=power.werewolf

&advantage.essence DD=ladd( u( .value_full, %0, advantage.essence_maximum ), . )
&default.advantage.essence DD=derived
&tags.advantage.essence D:T=derived.werewolf

&advantage.essence_maximum DD=
	elements( 
		10 11 12 13 14 15 20 30 50 100, 
		u( .value, %0, advantage.primal_urge )
	)
&default.advantage.essence_maximum DD=derived
&tags.advantage.essence_maximum D:T=derived.werewolf



/* 
================================================================================
== WEREWOLF RENOWN =============================================================

Cunning, Glory, Honor, Purity, and Wisdom

Effective Rank.
*/

&renown.cunning DD=1.2.3.4.5
&tags.renown.cunning D:T=werewolf.irraka.iron masters

&renown.glory DD=1.2.3.4.5
&tags.renown.glory D:T=werewolf.cahalith.blood talons

&renown.honor DD=1.2.3.4.5
&tags.renown.honor D:T=werewolf.elodoth.storm lords

&renown.purity DD=1.2.3.4.5
&tags.renown.purity D:T=werewolf.rahu.hunters in darkness

&renown.wisdom DD=1.2.3.4.5
&tags.renown.wisdom D:T=werewolf.ithaeur.bone shadows

&advantage.effective_rank DD=
	switch( ladd( iter( lattr( %0/_renown.* ), first( get( %0/%i0 ), . ))), 
		<4, 1, 
		<8, 2, 
		<13, 3, 
		<19, 4, 
		<26, 5, 
		0 
	)
&default.advantage.effective_rank DD=derived
&tags.advantage.effective_rank D:T=werewolf.derived



/*
================================================================================
== WEREWOLF MERITS =============================================================
*/

// -- Merits: Cross-Sphere -----------------------------------------------------

// Merit.Producer, from Vampire Core

@if hasattr( DD, merit.producer )={ 
		&tags.merit.producer D:T=[get( D:T/tags.merit.producer )].wolf-blooded
	}


// -- Merits: Wolf-Blooded -----------------------------------------------------

&merit.pack_bond dd=1.3
&tags.merit.pack_bond d:t=wolf-blooded

&merit.tell_() dd=3|
	A Wolf's Meat.Anger Issues.Bite.Bitten.Clever Fingers.Devil Inside.
	Evil Eye.Exciting.Familiar.Fuck Ugly.Horse.Host-Ache.Liar's Skin.Marker.
	Moon Marked.Phantom Pack.Piercing Eyes.Second Skin.Shape-Shifted.
	Shadow Twin.Skinner.Spirit Double.Strong Scent.Third Nipple.Tongues.
	Waystone.Wolf Sign
&tags.merit.tell_() d:t=wolf-blooded

&merit.raised_by_wolves dd=1
&tags.merit.raised_by_wolves d:t=wolf-blooded

// Wolf-Blooded Merits: Tribal Affinity

&merit.fenris-ur's_blood dd=2
&prerequisite.merit.fenris-ur's_blood dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.fenris-ur's_blood dd=Only one Tribal Affinity merit allowed
&tags.merit.fenris-ur's_blood d:t=wolf-blooded.tribal affinity

&merit.kamduis-ur's_blood dd=2
&prerequisite.merit.kamduis-ur's_blood dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.kamduis-ur's_blood dd=Only one Tribal Affinity merit allowed
&tags.merit.kamduis-ur's_blood d:t=wolf-blooded.tribal affinity

&merit.hikaon-ur's_blood dd=2
&prerequisite.merit.hikaon-ur's_blood dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.hikaon-ur's_blood dd=Only one Tribal Affinity merit allowed
&tags.merit.hikaon-ur's_blood d:t=wolf-blooded.tribal affinity

&merit.sagrim-ur's_blood dd=2
&prerequisite.merit.sagrim-ur's_blood dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.sagrim-ur's_blood dd=Only one Tribal Affinity merit allowed
&tags.merit.sagrim-ur's_blood d:t=wolf-blooded.tribal affinity

&merit.skolis-ur's_blood dd=2
&prerequisite.merit.skolis-ur's_blood dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.skolis-ur's_blood dd=Only one Tribal Affinity merit allowed
&tags.merit.skolis-ur's_blood d:t=wolf-blooded.tribal affinity

&merit.ghost_child dd=2
&prerequisite.merit.ghost_child dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			tribal affinity, 0 
		)), 
		1 
	)
&prereq-text.merit.ghost_child dd=Only one Tribal Affinity merit allowed
&tags.merit.ghost_child d:t=wolf-blooded.tribal affinity


// Wolf-Blooded Merits: Moon Birth

&merit.crescent_moon's_birth dd=2
&prerequisite.merit.crescent_moon's_birth dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.crescent_moon's_birth dd=Only one Moon Birth merit allowed
&tags.merit.crescent_moon's_birth dd=wolf-blooded.moon birth

&merit.full_moon's_birth dd=2
&prerequisite.merit.full_moon's_birth dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.full_moon's_birth dd=Only one Moon Birth merit allowed
&tags.merit.full_moon's_birth dd=wolf-blooded.moon birth

&merit.gibbous_moon's_birth_() dd=2|
	Academics.Computer.Crafts.Investigation.Medicine.Occult.Politics.Science
&prerequisite.merit.gibbous_moon's_birth_() dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.gibbous_moon's_birth_() dd=Only one Moon Birth merit allowed.
&tags.merit.gibbous_moon's_birth_() dd=wolf-blooded.moon birth

&merit.half_moon's_birth dd=2
&prerequisite.merit.half_moon's_birth dd=
	cand( 
		lte( 
			words( filter( 
				u( d.sfp )/f.hastag?.workhorse, 
				edit( 
					lattr( %0/_merit.* ), 
					_MERIT., 
					MERIT. 
				), , , 
				moon birth, 0 
			)), 
			1 
		), 
		t( lattr( %0/_merit.safe_place_(*) ))
	)
&prereq-text.merit.half_moon's_birth dd=Only one Moon Birth merit allowed, 
	Must Have Safe Place 1+
&tags.merit.half_moon's_birth dd=wolf-blooded.moon birth

&merit.no_moon's_birth dd=2
&prerequisite.merit.no_moon's_birth dd=
	lte( 
		words( filter( 
			u( d.sfp )/f.hastag?.workhorse, 
			edit( 
				lattr( %0/_merit.* ), 
				_MERIT., 
				MERIT. 
			), , , 
			moon birth, 0 
		)), 
		1 
	)
&prereq-text.merit.no_moon's_birth dd=Only one Moon Birth merit allowed
&tags.merit.no_moon's_birth dd=wolf-blooded.moon birth


// -- Merits: Werewolf ---------------------------------------------------------

&merit.anchored_() DD=1.2|*
&tags.merit.anchored_() D:T=werewolf.mental

&merit.blood_or_bone_affinity DD=2.5|Blood.Bone.Both
&prerequisite.merit.blood_or_bone_affinity DD=
	u( .between, %0, advantage.harmony, 3, 8 )
&prereq-text.merit.blood_or_bone_affinity DD=Harmony 3 to 8
&tags.merit.blood_or_bone_affinity D:T=werewolf.mental.harmony
&notes.merit.blood_or_bone_affinity D:T=Staff should also: 
	stat/set <player>/blood or bone affinity.<which one>=1

&merit.code_of_honor DD=2
&prerequisite.merit.code_of_honor DD=
	u( .at_least, %0, advantage.harmony, 8 )
&prereq-text.merit.code_of_honor DD=Harmony 8
&tags.merit.code_of_honor D:T=werewolf.mental.harmony

&merit.controlled_burn DD=2
&prerequisite.merit.controlled_burn DD=
	u( .at_least_all, %0, attribute.resolve:3 attribute.composure:3 )
&prereq-text.merit.controlled_burn DD=Resolve 3, Composure 3
&tags.merit.controlled_burn D:T=werewolf.mental

&merit.creative_tactician DD=3
&prerequisite.merit.creative_tactician DD=u( .at_least, %0, renown.purity, 2 )
&prereq-text.merit.creative_tactician DD=Purity 2
&tags.merit.creative_tactician D:T=werewolf.mental.purity

&merit.dedicated_locus_() DD=1.2.3.4.5|*
&prerequisite.merit.haven_() DD=u( .has, %0, merit.haven_(%1) )
&prereq-text.merit.haven_() DD=Safe Place (<place name>) 1
&tags.merit.dedicated_locus_() D:T=werewolf.social.location

&merit.embodiment_of_the_firstborn DD=5
&prerequisite.merit.embodiment_of_the_firstborn DD=
	u( .is_not, %0, bio.tribe, Ghost Wolf )
&prereq-text.merit.embodiment_of_the_firstborn DD=
	Cannot be a Ghost Wolf, must have Tribe
&tags.merit.embodiment_of_the_firstborn D:T=werewolf.physical

&merit.fading DD=3
&prerequisite.merit.fading DD=u( .at_least, %0, renown.cunning, 2 )
&prereq-text.merit.fading DD=Cunning 2
&tags.merit.fading D:T=werewolf.physical.cunning

&merit.favored_form_() DD=1.2.3.4.5|Dalu.Gauru.Urshul.Urhan|*
&prerequisite.merit.favored_form_() DD=
	cand( 
		u( .at_least_stat, %0, 
			merit.favored_form_(%1), 
			advantage.primal_urge + 1, %2 
		), 
		not( 
			setdiff( 
				lattr( %0/_merit.favored_form_(*)), 
				_merit.favored_form_(%1) 
			)
		)
	)
&prereq-text.merit.favored_form_() DD=
	Primal Urge 1 higher than Merit rating, Cannot take any other Favored Forms 
&tags.merit.favored_form_() D:T=werewolf.physical
&note.merit.favored_form_() D:T=
	For each dot, set a substat with the name of the stat affected and the value 
	of Favored Form it was gained at. 
	e.g.: stat/set <name>/favored form (urhan).stealth=1
// +shift MUST respect this stat

&merit.fortified_form_() DD=3.4.5|Dalu.Gauru.Urshul.Urhan
&prerequisite.merit.fortified_form_() DD=
	u( .at_least_all, %0, attribute.stamina:3 skill.survival:2 )
&prereq-text.merit.favored_form_() DD=Stamina 3, Survival 2
&tags.merit.fortified_form_() D:T=werewolf.physical
// +shift MIGHT respect this stat

&merit.hearing_whispers DD=2
&prerequisite.merit.hearing_whispers DD=u( .is, %0, bio.tribe, Bone Shadows )
&prereq-text.merit.hearing_whispers DD=Tribe is Bone Shadows
&tags.merit.hearing_whispers D:T=werewolf.bone shadows.mental

&merit.impartial_mediator DD=3
&prerequisite.merit.impartial_mediator DD=u( .at_least, %0, renown.honor, 2 )
&prereq-text.merit.impartial_mediator DD=Honor 2
&tags.merit.impartial_mediator D:T=werewolf.social.honor

&merit.living_weapon_() DD=3.4.5|Dalu.Gauru.Urshul.Urhan
&prerequisite.merit.living_weapon_() DD=
	u( .at_least_all, %0, attribute.stamina:3 skill.survival:2 )
&prereq-text.merit.living_weapon_() DD=Stamina 3, Survival 2
&tags.merit.living_weapon_() D:T=werewolf.physical

&merit.moon-kissed_() DD=1|*
&prerequisite.merit.moon-kissed_() DD=
	cand( 
		u( .at_least, %0, skill.%1, 2 ), 
		u( .auspice_skill_check, %0, skill.%1 )
	)
&prereq-text.merit.moon-kissed_() DD=Type must be an Auspice Skill at 2+
&tags.merit.moon-kissed_() D:T=werewolf
/*
When taking this Merit, choose one of her three auspice Skills. That Skill has the 9-again quality. If you already have 9-again available, use 8-again.
*/

&merit.nowhere_to_run DD=2
&prerequisite.merit.nowhere_to_run DD=
	u( .is, %0, bio.tribe, Hunters in Darkness )
&prereq-text.merit.nowhere_to_run DD=Tribe is Hunters in Darkness
&tags.merit.nowhere_to_run D:T=werewolf.hunters in darkness

&merit.pack_dynamics DD=3.4.5
&tags.merit.pack_dynamics D:T=werewolf.pack.social

&merit.residential_area DD=1.2.3.4.5
&tags.merit.residential_area D:T=werewolf.social

&merit.resonance_shaper DD=3
&prerequisite.merit.resonance_shaper DD=u( .at_least, %0, renown.wisdom, 2 )
&prereq-text.merit.resonance_shaper DD=Wisdom 2
&tags.merit.resonance_shaper D:T=werewolf.mental.wisdom

&merit.self-control DD=2
&prerequisite.merit.self-control DD=u( .at_least, %0, attribute.resolve, 4 )
&prereq-text.merit.self-control DD=Resolve 4
&tags.merit.self-control D:T=werewolf.physical

&merit.song_in_your_heart DD=3
&prerequisite.merit.song_in_your_heart DD=u( .at_least, %0, renown.glory, 2 )
&prereq-text.merit.song_in_your_heart DD=Glory 2
&tags.merit.song_in_your_heart D:T=werewolf.glory.social

&merit.sounds_of_the_city DD=2
&prerequisite.merit.sounds_of_the_city DD=u( .is, %0, bio.tribe, Iron Masters )
&prereq-text.merit.sounds_of_the_city DD=Tribe is Iron Masters
&tags.merit.sounds_of_the_city D:T=werewolf.iron masters.social

&merit.strings_of_the_heart DD=2
&prerequisite.merit.strings_of_the_heart DD=u( .is, %0, bio.tribe, Storm Lords )
&prereq-text.merit.strings_of_the_heart DD=Tribe is Storm Lords
&tags.merit.strings_of_the_heart D:T=werewolf.storm lords.social

// totem can be bought to 1 or 5 for wolf-blooded with merit.pack_bond
&merit.totem DD=1.2.3.4.5
&prerequisite.merit.totem DD=
  localize( if( 
		u( .is_full, %0, bio.template, wolf-blooded ), 
		case( 
			setr( 9, u( .value, %0, merit.pack_bond )), 
			1, lte( add( u( .value, %0, merit.totem ), %2 ), 1 ), 
			3, lte( add( u( .value, %0, merit.totem ), %2 ), 5 ), 
			0 
		), 
		1 
	))
&prereq-text.merit.totem DD=Wolf-Blooded must have Pack Bond merit
	at 1 for 1, at 3 for up to 5
&tags.merit.totem D:T=werewolf.wolf-blooded.shared

&merit.weakest_link DD=2
&prerequisite.merit.weakest_link DD=u( .is, %0, bio.tribe, Blood Talons )
&prereq-text.merit.weakest_link DD=Tribe is Blood Talons
&tags.merit.weakest_link D:T=werewolf.blood talons.social


// -- Merits: Fighting Merits --------------------------------------------------

&merit.call_out DD=2
&prerequisite.merit.call_out DD=
	u( .at_least_all, %0, 
		renown.honor:3 attribute.composure:3 skill.intimidation:2 
	)
&prereq-text.merit.call_out DD=Honor 2, Intimidation 2, Composure 3
&tags.merit.call_out D:T=werewolf.fighting.honor

&merit.efficient_killer DD=2
&prerequisite.merit.efficient_killer DD=
	u( .at_least_all, %0, 
		renown.purity:2 attribute.strength:3 skill.brawl:3 skill.medicine:2 
	)
&prereq-text.merit.efficient_killer DD=Purity 2, Brawl 3, Medicine 2, Strength 3
&tags.merit.efficient_killer D:T=werewolf.fighting.purity
&notes.merit.efficient_killer D:T=May only be used in Gauru form

&merit.flanking DD=2
&prerequisite.merit.flanking DD=
	u( .at_least_all, %0, 
		renown.cunning:2 attribute.wits:3 skill.stealth:2 skill.brawl:2 
	)
&prereq-text.merit.flanking DD=Cunning 2, Wits 3, Stealth 2, Brawl 2
&tags.merit.flanking D:T=werewolf.fighting.cunning

&merit.instinctive_defense DD=2
&prerequisite.merit.instinctive_defense DD=
	u( .at_least_all, %0, advantage.primal_urge:2 skill.athletics:2 )
&prereq-text.merit.instinctive_defense DD=Primal Urge 2, Athletics 2
&tags.merit.instinctive_defense D:T=werewolf.fighting

&merit.relentless_assault DD=1.2.3.4.5
&prerequisite.merit.relentless_assault DD=
	u( .at_least_all, %0, 
		attribute.strength:3 attribute.stamina:3 skill.brawl:2 
	)
&prereq-text.merit.relentless_assault DD=Strength 3, Stamina 3, Brawl 2
&tags.merit.relentless_assault D:T=werewolf.style.fighting

&merit.spiritual_blockage DD=2
&prerequisite.merit.spiritual_blockage DD=
	u( .at_least_all, %0, 
		renown.wisdom:2 attribute.wits:3 skill.brawl:1 skill.occult:3 
	)
&prereq-text.merit.spiritual_blockage DD=Wisdom 2, Brawl 1, Occult 3, Wits 3
&tags.merit.spiritual_blockage D:T=werewolf.fighting.wisdom

&merit.tactical_shifting DD=1.2.3.4.5
&prerequisite.merit.tactical_shifting DD=
	u( .at_least_all, %0, 
		attribute.wits:3 attribute.dexterity:3 skill.athletics:2 
	)
&prereq-text.merit.tactical_shifting DD=Wits 3, Dexterity 3, Athletics 2
&tags.merit.tactical_shifting D:T=werewolf.style.fighting

&merit.warcry DD=2
&prerequisite.merit.warcry DD=
	u( .at_least_all, %0, 
		renown.glory:2 attribute.presence:3 skill.expression:2 
		skill.intimidation:2 
	)
&prereq-text.merit.warcry DD=Glory 2, Presence 3, Expression 2, Intimidation 2
&tags.merit.warcry D:T=werewolf.style.fighting.glory
&notes.warcry D:T=May only be used in Gauru, Urshul, or Urhan form



/*
================================================================================
== WEREWOLF RITES ==============================================================

Vampire also uses the 'rite' stat type, and it's also always a 'flag'.

*/

&class.rite.? dd=flag

// -- Rites: Wolf --------------------------------------------------------------

&rite.chain_rage dd=1
&tags.rite.chain_rage d:t=werewolf.wolf

&rite.messenger dd=1
&tags.rite.messenger d:t=werewolf.wolf

&rite.bottle_spirit dd=2
&tags.rite.bottle_spirit d:t=werewolf.wolf

&rite.sacred_hunt dd=2
&tags.rite.sacred_hunt d:t=werewolf.wolf

&rite.kindle_fury dd=3
&tags.rite.kindle_fury d:t=werewolf.wolf

&rite.shadowbind dd=3
&tags.rite.shadowbind d:t=werewolf.wolf

&rite.fetish dd=4
&tags.rite.fetish d:t=werewolf.wolf

&rite.twilight_purge dd=4
&tags.rite.twilight_purge d:t=werewolf.wolf

&rite.forge_alliance dd=5
&tags.rite.forge_alliance d:t=werewolf.wolf

&rite.urfarah's_bane dd=5
&tags.rite.urfarah's_bane d:t=werewolf.wolf

&rite.veil dd=5
&tags.rite.veil d:t=werewolf.wolf

// -- Rites: Pack --------------------------------------------------------------

&rite.banish dd=1
&tags.rite.banish d:t=werewolf.wolf-blooded.pack

&rite.harness_the_circle dd=1
&tags.rite.harness_the_circle d:t=werewolf.wolf-blooded.pack

&rite.totemic_empowerment dd=1
&tags.rite.totemic_empowerment d:t=werewolf.wolf-blooded.pack

&rite.hunting_ground dd=2
&tags.rite.hunting_ground d:t=werewolf.wolf-blooded.pack

&rite.moon's_mad_love dd=2
&tags.rite.moon's_mad_love d:t=werewolf.wolf-blooded.pack

&rite.wellspring dd=1
&tags.rite.wellspring d:t=werewolf.wolf-blooded.pack

&rite.raiment_of_the_storm dd=3
&tags.rite.raiment_of_the_storm d:t=werewolf.wolf-blooded.pack

&rite.shadowcall dd=3
&tags.rite.raiment_of_the_storm d:t=werewolf.wolf-blooded.pack

&rite.supplication dd=3
&tags.rite.supplication d:t=werewolf.wolf-blooded.pack

&rite.hidden_path dd=4
&tags.rite.hidden_path d:t=werewolf.wolf-blooded.pack

&rite.expel dd=4
&tags.rite.expel d:t=werewolf.wolf-blooded.pack

&rite.great_hunt dd=5
&tags.rite.great_hunt d:t=werewolf.wolf-blooded.pack




/* 
################################################################################
## WEREWOLF CHARGEN ############################################################


================================================================================
== CHARGEN: BIO ================================================================

incarnation
agenda

--------------------------------------------------------------------------------
-- Bio Check: Wolf-Blooded -----------------------------------------------------

('pack' doesn't need to be set)
*/

&check.bio.wolf-blooded cg=


/*
================================================================================
== CHARGEN CHECK: WEREWOLF =====================================================



================================================================================
== CHARGEN CHECK: WOLF-BLOODED =================================================

one free merit.tell_()

*/

&f.allocated.merits.wolf-blooded cg=
	get( %0/[first( lattr( %0/_merit.tell_(*) ))] )


&check.chargen.wolf-blooded cg=
	strcat( 
		%b, %b, ansi( h, Free Tell ), :, %b, 
		u( display.check.ok-no, 
			eq( u( f.allocated.merits.wolf-blooded, %0 ), 3 )
		), 
		%r 
	)



/*
################################################################################
## WEREWOLF: XP COSTS ##########################################################

Trait Experience
Rites 1
Affinity Gift 3
Non-Affinity Gift 5 
Wolf Gift Facet 1
Additional Facet 2
Renown 3
Primal Urge 5
*/

// &xp.advantage.<power> XP Cost Database <xpcd>=u( cost.standard, 5, %1, %2 )

&xp.advantage.harmony XP Cost Database <xpcd>=0

&d.restricted.types.werewolf xpas=gift
&d.restricted.stats.werewolf xpas=

&xp.renown xpcd=u( cost.standard, 3, %1, %2 )
&xp.advantage.primal_urge xpcd=u( cost.standard, 5, %1, %2 )
&xp.rite xpcd=u( cost.standard, 1, %1, %2 )

/*
Following is sent from XP: 
	%0: dbref of sheet
	%1: from
	%2: to
	%3: name of stat, sans instance
	%4: value.list.of.statpath
*/

&xp.gift xpcd=
	case( 1, 
		cand( 
			strmatch( %2, unlock ), 
			hastag?( 
				%3, 
					[u( .value_full, %0, bio.tribe )].
					[u( .value_full, %0, bio.auspice )], 0 
			) 
		), 3, 
		strmatch( %2, unlock ), 5, 
		hastag?( %3, wolf ), 1, 
		2
	)



/*
################################################################################
## WEREWOLF: SHEET #############################################################
*/

// -- Bio ----------------------------------------------------------------------

&bio.default.wolf-blooded Newest Sheet Code <nsc>=
	birthdate concept pack template virtue vice 

&bio.default.werewolf [v( d.nsc )]=
	birthdate concept pack lodge template blood bone auspice tribe

// -- Powers: Gifts ------------------------------------------------------------
// 0: sheet dbref
// 1: moon, shadow, or wolf (type of gift)
// outputs: <name>:<value>.<desc>:<value>.<desc>|...

&powers.gifts [v( d.nsc )]=
	iter( 
		filter( v( d.sfp )/f.hastag?.workhorse, 
			sort( edit( lattr( %0/_gift.* ), _GIFT., gift. )), 
			, , %1, 1 
		), 
		ulocal( f.cheat_getstat.with_name, %0, %i0, list ), 
		, | 
	)

// -- Powers: Renown -----------------------------------------------------------
// outputs: <renown>:<value>|...|Effective Rank:<value>

&powers.renown [v( d.nsc )]=
	iter( 
		renown.purity renown.glory renown.honor 
		renown.wisdom renown.cunning advantage.effective_rank, 
		ulocal( f.cheat_getstat.with_name, %0, %i0, numeric ), 
		, | 
	)

// -- Powers: Rites ------------------------------------------------------------
// May collide with 'powers.disciplines.rites', but so be it

&powers.rites.werewolf [v( d.nsc )]=
	iter( sort( edit( lattr( %0/_rite.* ), _RITE., )), 
		ulocal( f.cheat_getstat.with_name, %0, rite.%i0, numeric ), 
		, | 
	)


// -- 

&block.powers.werewolf sheet: rows=
  strcat( 

// .. renown
		setq( w, 26 ), setq( t, 16 ), 
		setq( x, ulocal( powers.renown, %0 )), 
		setq( y, 
			iter( elements( %qx, 1 2, | ), 
				u( display.trait-and-value, %i0, %qt, %qw, numeric ), 
				|, | 
			)
		), 
		setq( z, 
			iter( elements( %qx, 3 4, | ), 
				u( display.trait-and-value, %i0, %qt, %qw, numeric ), 
				|, | 
			)
		), 
		setq( a, 
			iter( elements( %qx, 5 6, | ), 
				u( display.trait-and-value, %i0, %qt, %qw, numeric ), 
				|, | 
			)
		), 

		divider( Renown ), %r, 
		vcolumns( 
			%qw:%qy, 
			%qw:%qz, 
			%qw:%qa, 
			|, 
			%b 
		), %r, 

// .. gifts
		setq( w, 79 ), setq( t, 70 ), 
		divider( Gifts ), %r, 

		iter( moon shadow wolf, 
			strcat( 
				setq( d, u( powers.gifts, %0, %i0 )), 
				iter( %qd, 
					ulocal( display.gift, %i0, %qw, . ), 
					|, %r  
				), 
			), , %r 
		), %r, 

// .. rites, if any 
		setq( x, u( powers.rites.werewolf, %0 )), 
		if( strlen( %qx ), 
			strcat( 
				setq( w, 38 ), setq( t, 38 ), 

				setq( y, 
					iter( %qx, 
						u( display.trait-name-only, %i0, %qt, %qw, flag ), 
						|, | 
					)
				), 
				setq( a, words( %qx, | )), 
				setq( b, ceil( fdiv( %qa, 2 ))), 
				setq( c, lnum( 1, %qb )), 
				setq( d, lnum( inc( %qb ), inc( %qa ))),

				divider( Rites ), %r, 

				vcolumns( 
					%qw:[elements( %qy, %qc, |, | )], 
					%qw:[elements( %qy, %qd, |, | )], 
					|, 
					%b 
				), %r 
			)
		)
	)

// --

/*
	n: name
	r: rest of the gifts
	u: 'unlock' value, if set
	s: does stat take 'unlock'?
	t: text for first line (priming read stuff)
	l: length of padding between 'name' and 'value'

&display.gift sheet: rows=
	strcat( 
		setq( n, first( %0, : )), 
		setq( r, rest( %0, : )), 
		setq( u, grab( %qr, Unlock.*, : )),
		setq( s, 
			match( 
				first( get( v( d.dd )/gift.[edit( %qn, %b, _ )] ), | ), 
				Unlock, . 
			)
		), 

		if( cand( strmatch( %qr, Unlock.* ), eq( words( %qr, : ), 1 )), 
			setq( r, .[rest( %qu, . )]), 
			setq( r, remove( %qr, %qu, : ))
		), 

		if( cand( %qs, not( %qu )), 
			setq( n, ansi( n, %qn%b, xh, %(not unlocked%) ))
		), 

		setq( t, 
			strcat( 
				rest( first( %qr, : ), . ), 
				if( t( setr( z, first( first( %qr, : ), . ))), 
					strcat( 
						%b, %(, first( first( %qr, : ), . ), %)
					)
				)
			)
		), 

		setq( l, 
			sub( %1, add( strlen( %qn ), strlen( %qt ), 4 ))
		), 

		%qn, %b, ansi( xh, repeat( %2, %ql )), %b, %qt, 
		iter( rest( %qr, : ), 
			%r
			[rjust( 
				strcat( rest( %i0, . ), %b, %(, first( %i0, . ), %) ), 
				sub( %1, 2 )
			)], 
			:, @@ 
		)
	)

// --

&block.powers.wolf-blooded sheet: rows=
  strcat( 

// .. rites, if any 
		setq( x, u( powers.rites.werewolf, %0 )), 
		if( strlen( %qx ), 
			strcat( 
				setq( w, 38 ), setq( t, 38 ), 

				setq( y, 
					iter( %qx, 
						u( display.trait-name-only, %i0, %qt, %qw, flag ), 
						|, | 
					)
				), 
				setq( a, words( %qx, | )), 
				setq( b, ceil( fdiv( %qa, 2 ))), 
				setq( c, lnum( 1, %qb )), 
				setq( d, lnum( inc( %qb ), inc( %qa ))),

				divider( Rites ), %r, 

				vcolumns( 
					%qw:[elements( %qy, %qc, |, | )], 
					%qw:[elements( %qy, %qd, |, | )], 
					|, 
					%b 
				), %r 
			)
		)
	)


// -- Advantages ---------------------------------------------------------------

&traits.morality.werewolf Newest Sheet Code <nsc>=
	ulocal( f.cheat_getstat.morality, %0, harmony )

&traits.essence Newest Sheet Code <nsc>=
	u( f.cheat_getstat.pool, %0, essence )

&block.traits.essence sheet: rows=
	strcat( 
		setq( w, 38 ), 
		setq( t, 10 ), 

// .. essence
		setq( x, ulocal( traits.essence, %0 )), 
		setq( c, rest( setr( y, first( %qx, | )), : )), 
		setq( p, last( %qx, : )), 

// .. return
		u( display.trait-and-value, %qy, %qt, %qw, pool, %b, %qp )
	)


&block.traits.werewolf sheet: rows=
	strcat( 
		setq( w, 38 ), 
		setq( t, 10 ), 

// .. essence (power pool)
		setq( r, ulocal( block.traits.essence, %0 )), 

// .. primal urge (supernatural resistance)
		setq( z, 
			u( display.trait-and-value, 
				u( traits.supernatural_resistance, %0 ), 
				inc( strlen( Primal Urge )), %qw, numeric 
			)
		), 

// .. display
		vcolumns( 
			%qw:%qr, 
			%qw:%qz, 
			|, %b 
		), %r, 
	)


// -- Gifts --------------------------------------------------------------------

&.gifts.facet_check.moon DD=
	cand( 
// check auspice
		u( .is, %0, bio.auspice, %1 ), 

// check that 1 comes before 2; this is harder because it's a 'list' stat class
		case( 1, 
			strmatch( %3, ), 1, 
			cor( 
				u( .list_has_all, %0, %2, lnum( 1, %3, . )), 
				cand( 
					u( .has_not, %0, %2 ), 
					eq( %3, 1 )
				), 
				strmatch( %3, ![last( u( .value_full, %0, %2 ), . )])
			)
		)
	)


&.gifts.facet_check.wolf DD=
		switch( %2, 
			@@( null ), 1, 
			Unlock, 1, 
			!Unlock, 1, 
			!*, u( .has, %0, renown.[rest( %2, ! )] ), 
			u( .has, %0, renown.%2 )
		)

&.gifts.facet_check.shadow DD=
	cand( 
		cor( 
			u( .list_has, %0, %1, Unlock ), 
			strmatch( %2, Unlock )
		), 
		u( .gifts.facet_check.wolf, %0, %1, %2 )
	)

&class.gift.? DD=list


// -- Moon Gifts ---------------------------------------------------------------

&gift.crescent_moon's_gift DD=1.2.3.4.5|
	Shadow Gaze.Spirit Whispers.Shadow Hunter.Shadow Masquerade.Panopticon
&prerequisite.gift.crescent_moon's_gift DD=
	u( .gifts.facet_check.moon, %0, Ithaeur, gift.crescent_moon's_gift, %2 )
&prereq-text.gift.crescent_moon's_gift DD=Auspice is Ithaeur, must be set 
	or unset in order
&tags.gift.crescent_moon's_gift D:T=werewolf.moon.ithaeur

&gift.full_moon's_gift DD=1.2.3.4.5|
	Killer Instinct.Warrior's Hide.Bloody-Handed Hunter.Butchery.Crimson Spasm
&prerequisite.gift.full_moon's_gift DD=
	u( .gifts.facet_check.moon, %0, Rahu, gift.full_moon's_gift, %2 )
&prereq-text.gift.full_moon's_gift DD=
	Auspice is Rahu, must be set or unset in order
&tags.gift.full_moon's_gift D:T=werewolf.moon.rahu

&gift.gibbous_moon's_gift DD=1.2.3.4.5|
	War Howl.Voice of Glory.Dream Hunter.Thousand-Throat Howl.End of Story
&prerequisite.gift.gibbous_moon's_gift DD=
	u( .gifts.facet_check.moon, %0, Cahalith, gift.gibbous_moon's_gift, %2 )
&prereq-text.gift.gibbous_moon's_gift DD=
	Auspice is Cahalith, must be set or unset in order
&tags.gift.gibbous_moon's_gift D:T=werewolf.moon.cahalith

&gift.half_moon's_gift DD=1.2.3.4.5|
	Scent Beneath the Surface.Binding Oath.Sly Hunter.
	Ties of Word and Promise.Ties of Blood and Bone
&prerequisite.gift.half_moon's_gift DD=
	u( .gifts.facet_check.moon, %0, Elodoth, gift.half_moon's_gift, %2 )
&prereq-text.gift.half_moon's_gift DD=
	Auspice is Elodoth, must be set or unset in order
&tags.gift.half_moon's_gift D:T=werewolf.moon.elodoth

&gift.new_moon's_gift DD=1.2.3.4.5|
	Eviscerate.Slip Away.Relentless Hunter.Divide and Conquer.Breach
&prerequisite.gift.new_moon's_gift DD=
	u( .gifts.facet_check.moon, %0, Irraka, gift.new_moon's_gift, %2 )
&prereq-text.gift.new_moon's_gift DD=
	Auspice is Irraka, must be set or unset in order
&tags.gift.new_moon's_gift D:T=werewolf.moon.irraka

// -- Shadow Gifts (first draft) -----------------------------------------------

&gift.gift_of_death DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Cold Embrace.Barghest.Memento Mori.Bone Gnaw.Eyes of the Dead
&prerequisite.gift.gift_of_death DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_death, %2 )
&prereq-text.gift.gift_of_death DD=
	Must have Renown of the Facet entered (%2) and must have 'Unlock'.
&tags.gift.gift_of_death D:T=werewolf.shadow.bone shadows

&gift.gift_of_dominance DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Primal Allure.Glorious Lunacy.Lay Low the Challenger.
	Snarl of the Predator.Lead the Lesser Pack
&prerequisite.gift.gift_of_dominance DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_dominance, %2 )
&prereq-text.gift.gift_of_dominance DD=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_dominance D:T=werewolf.shadow.rahu.storm lords

&gift.gift_of_the_elementals DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Breath of Air.Catastrophe.Flesh of Earth.Tongue of Flame.
	Heart of Water
&prerequisite.gift.gift_of_the_elementals DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_the_elementals, %2 )
&prereq-text.gift.gift_of_the_elementals DD=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_the_elementals D:T=werewolf.shadow.ithaeur.bone shadows

&gift.gift_of_evasion DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Feet of Mist.Fog of War.Deny Everything.Hit and Run.Exit Strategy
&prerequisite.gift.gift_of_evasion DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_evasion, %2 )
&prereq-text.gift.gift_of_evasion DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_evasion D:T=werewolf.shadow.irraka.storm lords

&gift.gift_of_insight DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Prey on Weakness.Read the World's Loom.Echo Dream.
	Scent the Unnatural.One Step Ahead
&prerequisite.gift.gift_of_insight DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_insight, %2 )
&prereq-text.gift.gift_of_insight DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_insight D:T=werewolf.shadow.elodoth.bone shadows

&gift.gift_of_inspiration DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Lunatic Inspiration.Fearless Hunter.Pack Triumphs Together.Unity.
	Still Small Voice
&prerequisite.gift.gift_of_inspiration DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_inspiration, %2 )
&prereq-text.gift.gift_of_inspiration DD=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_inspiration D:T=werewolf.shadow.cahalith.blood talons

&gift.gift_of_knowledge DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Needle.This Story is True.Know Thy Prey.Lore of the Land.
	Sift the Sands
&prerequisite.gift.gift_of_knowledge DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_knowledge, %2 )
&prereq-text.gift.gift_of_knowledge DD=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_knowledge D:T=werewolf.shadow.cahalith.iron masters

&gift.nature's_gift DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Nature's Lure.Black Earth, Red Hunger.Knotted Paths.Pack Kin.
	Beast Ride
&prerequisite.gift.nature's_gift DD=
	u( .gifts.facet_check.shadow, %0, gift.nature's_gift, %2 )
&prereq-text.gift.nature's_gift DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.nature's_gift D:T=werewolf.shadow.hunters in darkness

&gift.gift_of_rage DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Incite Fury.Berserker's Might.Perfected Rage.Slaughterer.
	Raging Lunacy
&prerequisite.gift.gift_of_rage DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_rage, %2 )
&prereq-text.gift.gift_of_rage DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_rage D:T=werewolf.shadow.blood talons

&gift.gift_of_shaping DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Moldywarp.Shield-Breaker.Entropy's Toll.Perfection of Form.Sculpt
&prerequisite.gift.gift_of_shaping DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_shaping, %2 )
&prereq-text.gift.gift_of_shaping DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_shaping D:T=werewolf.shadow.ithaeur.iron masters

&gift.gift_of_stealth DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Shadow Pelt.Predator's Shadow.Pack Stalks to Prey.The Hunter Waits.
	Running Silent
&prerequisite.gift.gift_of_stealth DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_stealth, %2 )
&prereq-text.gift.gift_of_stealth DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_stealth D:T=werewolf.shadow.irraka.hunters in darkness

&gift.gift_of_strength DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Unchained.Predator's Unmatched Pursuit.Crushing Blow.
	Primal Strength.Rending Claws
&prerequisite.gift.gift_of_strength DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_strength, %2 )
&prereq-text.gift.gift_of_strength DD=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_strength D:T=werewolf.shadow.rahu.blood talons

&gift.gift_of_technology DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Garble.Unmake.Command Artiface.Shutdown.Iron Slave
&prerequisite.gift.gift_of_technology DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_technology, %2 )
&prereq-text.gift.gift_of_technology DD=
	Must have Renown of the Facet entered (%2), and must have 'Unlock'.
&tags.gift.gift_of_technology D:T=werewolf.shadow.iron masters

&gift.gift_of_warding DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Maze Ward.Ward the Wolf's Den.All Doors Locked.
	Predator's Claim.Boundary Ward
&prerequisite.gift.gift_of_warding DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_warding, %2 )
&prereq-text.gift.gift_of_warding DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_warding D:T=werewolf.shadow.elodoth.hunters in darkness

&gift.gift_of_weather DD=
	Unlock.Cunning.Glory.Honor.Purity.Wisdom|
	Unlocked.Cloak of Mist and Haze.Heavens Unleashed.Hunt Under Iron Skies.
	Grasp of Howling Winds.Hunt of Fire and Ice
&prerequisite.gift.gift_of_weather DD=
	u( .gifts.facet_check.shadow, %0, gift.gift_of_weather, %2 )
&prereq-text.gift.gift_of_weather DD=Must have Renown of the Facet entered (%2), 
	and must have 'Unlock'.
&tags.gift.gift_of_weather D:T=werewolf.shadow.storm lords

// -- Wolf Gifts (first draft) -------------------------------------------------

&gift.gift_of_change DD=
	Cunning.Glory.Honor.Purity.Wisdom|
	Skin Thief.Gaze of the Moon.Luna's Embrace.The Father's Form.
	Quicksilver Flesh
&prerequisite.gift.gift_of_change DD=
	u( .gifts.facet_check.wolf, %0, gift.gift_of_change, %2 )
&prereq-text.gift.gift_of_change DD=Must have Renown of the Facet entered (%2).
&tags.gift.gift_of_change D:T=werewolf.wolf

&gift.gift_of_hunting DD=
	Cunning.Glory.Honor.Purity.Wisdom|
	Honed Senses.Cow the Prey.Beast Talker.Tireless Hunter.Impossible Spoor
&prerequisite.gift.gift_of_hunting DD=
	u( .gifts.facet_check.wolf, %0, gift.gift_of_hunting, %2 )
&prereq-text.gift.gift_of_hunting DD=Must have Renown of the Facet entered (%2).
&tags.gift.gift_of_hunting D:T=werewolf.wolf

&gift.gift_of_pack DD=
	Cunning.Glory.Honor.Purity.Wisdom|
	Reflected Facets.Down the Prey.Totem's Wrath.Maw of Madness.Pack Awareness
&prerequisite.gift.gift_of_pack DD=
	u( .gifts.facet_check.wolf, %0, gift.gift_of_pack, %2 )
&prereq-text.gift.gift_of_pack DD=Must have Renown of the Facet entered (%2).
&tags.gift.gift_of_pack D:T=werewolf.wolf




/* 
################################################################################
## WEREWOLF CHARGEN ############################################################

Yeah, let's see how this works.



================================================================================
== CHARGEN: ALLOCATIONS ========================================================

--------------------------------------------------------------------------------
-- Allocated Merits: Primal Urge -----------------------------------------------
*/

&f.allocated.power-trait.werewolf [v(d.cg)]=
	mul( 
		dec( u( v( d.dd )/.value, %0, advantage.primal_urge )), 
		5 
	)


/*
--------------------------------------------------------------------------------
-- Allocated Gifts -------------------------------------------------------------

moon gift`shadow gift (auspice)`shadow gift (tribe)`other gifts (probably wolf)

*/

&f.allocated.gifts [v( d.cg )]=
	localize( strcat( 
		edit( setr( m, u( f.allocated.gifts.moon, %0 )), GIFT., ), `, 
		edit( setr( a, u( f.allocated.gifts.shadow.auspice, %0 )), GIFT., ), `, 
		edit( setr( t, 
			setdiff( 
				u( f.allocated.gifts.shadow.tribe, %0 ), 
				%q1 
			)
		), GIFT., ), `, 
		edit( setr( w, u( f.allocated.gifts.wolf, %0 )), GIFT., ), `, 
		edit( 
			setdiff( 
				edit( lattr( %0/_gift.* ), _GIFT., GIFT. ), 
				%qm %qa %qt %qw 
			), 
			GIFT., 
		), 
	))

// --

&f.allocated.gifts.moon [v( d.cg )]=
	localize( strcat( 
		setq( g, lattr( v( d.dd )/gift.* )), 
		setq( m, 
			filter( 
				v( d.sfp )/fil.list-stats-tags, %qg, , , 
				moon.[get( %0/_bio.auspice )], and 
			)
		), 
		setq( c, 
			u( f.list-stats-tags, 
				%0, gift, moon.[get( %0/_bio.auspice )], and 
			)
		), 
		setinter( %qm, %qc )
	))

// --

&f.allocated.gifts.shadow.auspice [v( d.cg )]=
	localize( strcat( 
		setq( g, lattr( v( d.dd )/gift.* )), 
		setq( m, 
			filter( 
				v( d.sfp )/fil.list-stats-tags, %qg, , , 
				shadow.[get( %0/_bio.auspice )], 1 
			)
		), 
		setq( c, 
			u( f.list-stats-tags, 
				%0, gift, shadow.[get( %0/_bio.auspice )], and 
			)
		), 
		setinter( %qm, %qc )
	))

// --

&f.allocated.gifts.shadow.tribe [v( d.cg )]=
	localize( strcat( 
		setq( g, lattr( v( d.dd )/gift.* )), 
		setq( m, 
			filter( 
				v( d.sfp )/fil.list-stats-tags, %qg, , , 
				shadow.[get( %0/_bio.tribe )], 1 
			)
		), 
		setq( c, 
			u( f.list-stats-tags, 
				%0, gift, shadow.[get( %0/_bio.tribe )], and 
			)
		), 
// take out auspice gifts that have already been accounted for 
		setq( a, u( f.allocated.gifts.shadow.auspice, %0 )), 
		setdiff( setinter( %qm, %qc ), %qa )
	))

// --

&f.allocated.gifts.wolf [v( d.cg )]=ulocal( f.list-stats-tags, %0, gift, wolf )


/*
--------------------------------------------------------------------------------
-- Allocated Rites -------------------------------------------------------------

Total points in rites (should be 2)

*/

&f.allocated.rites [v( d.cg )]=
	ladd( 
		iter( lattr( %0/_rite.* ), 
			get( %0/%i0 )
		)
	)



/*
================================================================================
== CHARGEN: BIO ================================================================

--------------------------------------------------------------------------------
-- Bio Check -------------------------------------------------------------------

*/

&check.bio.werewolf cg=blood bone auspice tribe



/* 
================================================================================
== CHARGEN CHECK ===============================================================


--------------------------------------------------------------------------------
-- Favored Skill ---------------------------------------------------------------

Should be easier than 'favored attribute':
	11/7/4
	find the one that's one higher
	scan that for auspice skills
	make sure at least one has 1 dot in it

*/

&check.chargen.skills.werewolf [v( d.cg )]=
  localize( strcat( 
		setq( a, v( d.werewolf.auspice_skills.[get( %0/_bio.auspice )] )), 
		setq( s, ulocal( f.allocated.skills, %0 )), 
		setq( k, edit( lattr( %0/_skill.* ), _SKILL., SKILL. )), 
		setq( x, 
			iter( mental physical social, 
				setinter( 
					lcstr( edit( 
						filter( u( d.sfp )/f.hastag?.workhorse, 
							%qk, , , %i0, 0 
						), SKILL., 
					)), 
					%qa 
				), 
				, | 
			)
		), 
		setq( f, 
			first( iter( %qs, 
				if( 
					lor( iter( 11 7 4, eq( %i0, dec( %i1 )))), 
					elements( %qx, inum( 0 ), | )
				), 
				/ 
			))
		), 

		ulocal( f.allocated.skills, %0 ), %b, %(of 11/7/4 + auspice skill%), %b, 
		ulocal( display.check.stats, %0, skills, skill.%qf:-1 ), 
		if( eq( words( %qf ), 0 ), 
			ansi( n, %b%[, r, but no auspice skill found, n, %] )
		), 
		%r, 

		%b %b%b, ansi( h, Auspice Skill ), :, %b, 
		titlestr( edit( itemize( %qf, , or ), _, %b )), %b, 
		%[, 
		case( 1, 
			eq( words( %qf ), 0 ), ansi( r, none found ), 
			ansi( g, OK )
		), 
		%] 
	))


// ... it would be easier if the following could be tagged and we'd 
// ... use the system created exactly for this kind of thing

&d.werewolf.auspice_skills.cahalith [v( d.cg )]=crafts expression persuasion
&d.werewolf.auspice_skills.elodoth [v( d.cg )]=empathy investigation politics
&d.werewolf.auspice_skills.irraka [v( d.cg )]=larceny stealth subterfuge
&d.werewolf.auspice_skills.ithaeur [v( d.cg )]=animal_ken medicine occult
&d.werewolf.auspice_skills.rahu [v( d.cg )]=brawl intimidation survival

// -- test --

think u( [v( d.cg )]/check.chargen.skills.werewolf, pmatch( thenomain ))

/*
--------------------------------------------------------------------------------
-- Chargen Check: Werewolf -----------------------------------------------------


*/

&check.chargen.werewolf [v( d.cg )]=
	strcat( 
		u( check.renown, %0 ), 
		u( check.gifts, %0 ), 
		u( check.rites, %0 ), 
		
	)


/*
--------------------------------------------------------------------------------
-- Chargen Check: Renown -------------------------------------------------------

Check that each renown's tags == (auspice + tribe) + 1

This stuff should be in some 'f.allocated.renown' or whatnot, but this 
will do.

r: renown available (dd)
a: renown for auspice & tribe
c: character's current renown
x: temp sheet renown
y: temp number of renown allowed

*/

&check.renown [v( d.cg )]=
	strcat( 
		setq( r, lattr( v( d.dd )/renown.* )), 
		setq( a, 
			edit( 
				filter( 
					v( d.sfp )/fil.list-stats-tags, %qr, , , 
					[get( %0/_bio.auspice )].[get( %0/_bio.tribe )] 
				), 
				RENOWN., 
			)
		), 
		setq( c, edit( lattr( %0/_renown.* ), _RENOWN., )), 
		setq( t, 0 ), 

		wdivider( Chargen Levels: Renown ), %r, 
		iter( setunion( %qc, %qa ), 
			strcat( 
				%b%b, 
				ansi( h, titlestr( %i0 )), :, %b, 
				setr( x, default( %0/_renown.%i0, 0 )), 
				setq( t, add( %qt, %qx )), 
				if( 
					cand( 
						t( match( %qa, %i0 )), 
						lt( %qx, 1 )
					), 
					ansi( n, %b%[, r, must exist, n, %] )
				), 
			), , %r 
		), %r, 
		%b%b, ansi( h, Points Spent ), : %qt/3, 
		%b, u( display.check.ok-no, eq( %qt, 3 )), 
		%r, 
	)

/*
--------------------------------------------------------------------------------
-- Chargen Check: Gifts --------------------------------------------------------

p.84: 

Start with one Facet of your auspice’s Moon Gift. 
Choose one Facet each of two Shadow Gifts from tribe and auspice. 
Choose one facet of a Wolf Gift, or the second Facet of your Moon Gift if you 
have two dots in your auspice Renown. 
You cannot choose a Facet in which your character has no dots of Renown.

Moon Gift (1 gift, 1-2 facets)
- Pretty easy to determine
- 1 facet (lvl 1) or 2 if Auspice Renown >= 2

Shadow Gifts (1-2 gifts, 1 facet each)
- Must be 2 different gifts
- 1 from Auspice Shadow list
- 1 from Tribe Shadow list (unless Ghost Wolf, who don't get one)

Wolf Gifts (0-1 gifts, 1 facet each)
- 0 if Auspice Renown >=2, otherwise 1 facet

Total: 3-4

0: sheet dbref

g: allocated gifts: moon`shadow (auspice)`shadow (tribal)`wolf`other/unaccounted
a: auspice
r: auspice renown
v: auspice renown's value
t: tribe

*/

&check.gifts [v( d.cg )]=
	strcat( 
		setq( g, u( f.allocated.gifts, %0 )), 

		wdivider( Chargen Levels: Gifts ), %r, 

		u( check.gifts.moon, %0, %qg ), 
		u( check.gifts.auspice, %0, %qg ), 
		u( check.gifts.tribe, %0, %qg ), 
		u( check.gifts.wolf, %0, %qg ), 
		u( check.gifts.other, %0, %qg ), 
	)

// -- 

think u( v( d.cg )/check.gifts, %# )

// -- check gifts: moon -- 
// 0: target sheet -- 1: %qg

&check.gifts.moon [v( d.cg )]=
	strcat( 
		setq( a, u( v( d.dd )/.value_full, %0, bio.auspice )), 
		setq( r, 
			filter( v( d.sfp )/fil.list-stats-tags, 
				lattr( v( d.dd )/renown.* ), , , %qa 
			)
		), 
		setq( v, u( v( d.dd )/.value, %0, %qr )), 
		setq( x, elements( %1, 1, ` )), 
		setq( k, eq( words( %qx ), 1 )), 

		%b%b, 
		ansi( h, Moon Gift ), :, %b, 
		titlestr( edit( itemize( %qx ), _, %b )), %b, 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				setq( f, 
					setdiff( 
						u( v( d.dd )/.value_full, %0, gift.%qx ), 
						unlock, 
						. 
					)
				), 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of %qv, %), 
				%b, u( display.check.ok-no, eq( %qx, %qv )), 
			)
		), %r 
	)

// -- check gifts: auspice -- 
// 0: target sheet -- 1: %qg

&check.gifts.auspice [v( d.cg )]=
	strcat( 
		setq( a, u( v( d.dd )/.value_full, %0, bio.auspice )), 
		setq( x, elements( %1, 2, ` )), 
		setq( k, eq( words( %qx ), 1 )), 

		%b%b, 
		ansi( h, Shadow Gift%, Auspice ), :, %b, 
		titlestr( edit( itemize( %qx ), _, %b )), %b, 
		%(of one%), %b, 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				setq( f, 
					setdiff( 
						u( v( d.dd )/.value_full, %0, gift.%qx ), 
						unlock, 
						. 
					)
				), 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of 1, 
				%), 
				%b, u( display.check.ok-no, eq( %qx, 1 ))
			)
		), 
		%r 
	)

// -- check gifts: tribe -- 
// 0: target sheet -- 1: %qg

&check.gifts.tribe [v( d.cg )]=
	strcat( 
		setq( x, setdiff( elements( %1, 3, ` ), elements( %1, 2, ` ))), 
		%b%b, 
		ansi( h, Shadow Gift%, Tribe ), :, %b, 
		titlestr( edit( %qx, %b, %,%b , _, %b )), 
		%b, 
		setq( k, 
			eq( 
				words( %qx ), 
				mul( 1, 
					setr( w, u( v( d.dd )/.is_not, %0, tribe, Ghost Wolves ))
				)
			)
		), 
		%(of, %b, if( strmatch( %qt, Ghost Wolves ), none, one ), %)%b, 
		u( display.check.ok-no, %qk ), 
		if( cand( %qk, %qw ), 
			strcat( 
				%r, %b %b%b, %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, words( %qf, . )), %b, out of 1, 
				%), 
				%b, u( display.check.ok-no, eq( %qx, 1 ))
			)
		), 
		%r 
	)

// -- check gifts: wolf -- 
// 0: target sheet -- 1: %qg

&check.gifts.wolf [v( d.cg )]=
	strcat( 
		%b%b, 
		ansi( h, Wolf Gifts ), :, %b, 
		titlestr( edit( itemize( setr( x, elements( %1, 4, ` ))), _, %b )), %b, 
		setq( k, 
			eq( 
				words( %qx ), mul( 1, eq( %qv, 1 ))
			)
		), 
		u( display.check.ok-no, %qk ), 
		if( %qk, 
			strcat( 
				%r%b %b %(, 
				ansi( h, Facets ), :, %b, 
				setr( x, 
					words( u( v( d.dd )/.value_full, %0, gift.%qx ), . )
				), %), 
				%b, u( display.check.ok-no, eq( %qx, mul( 1, eq( %qv, 1 )))), 
			)
		), 
	)


// -- check gifts: other -- 
// 0: target sheet -- 1: %qg

&check.gifts.other [v( d.cg )]=
	strcat( 
		setq( x, elements( %1, 5, ` )), 
		setq( k, eq( words( %qx ), 0 )), 
		if( not( %qk ), 
			strcat( 
				%r%b%b, 
				ansi( h, Other Gifts ), :, %b, 
				titlestr( edit( itemize( %qx ), _, %b )), %b, 
				u( display.check.ok-no, %qk ), 
			)
		), %r, 
	)




/*
--------------------------------------------------------------------------------
-- Chargen Check: Rites --------------------------------------------------------

2 dots of rites 

*/

&check.rites [v( d.cg )]=
	strcat( 
		setq( g, u( f.allocated.rites, %0 )), 
		%b%b, 
		ansi( h, Rites ), :, %b, 
		%qg out of 2, %b, 
		u( display.check.ok-no, eq( %qg, 2 )), 
		%r 
	)








/*
################################################################################
## WEREWOLF: ONGOING NOTES #####################################################

Willpower is equal to Resolve + Composure. Harmony is 7. Size is 5. Health is Size + Stamina. Speed is Size + Strength + Dexterity. Defense is the lower of Dexterity and Wits, plus Athletics. Primal Urge is 1, plus any bought with Merits.

Primal Urge starts at 1 dot. Additional dots may be purchased with five Merit dots each. A character cannot start with Primal Urge higher than 3.

Start with one Facet of your auspice’s Moon Gift. Choose one Facet each of two Shadow Gifts from tribe or auspice. Choose one facet of a Wolf Gift, or the second Facet of your Moon Gift if you have two dots in your auspice Renown. You cannot choose a Facet in which your character has no dots of Renown.

--

Cahalith: 
	Crafts, Expression, and Persuasion
	Glory
	Gibbous Moon, Inspiration, Knowledge
Elodoth: 
	Empathy, Investigation, and Politics
	Honor
	Half Moon, Insight, Warding
Irraka: 
	Larceny, Stealth, and Subterfuge
	Cunning
	New Moon, Evasion, Stealth
Ithaeur: 
	Animal Ken, Medicine, and Occult
	Wisdom
	Crescent Moon, Elemental, Shaping
Rahu: 
	Brawl, Intimidation, and Survival
	Purity
	Full Moon, Dominance, Strength

each tribe has an associated Renown; mark a dot in that Renown

Blood Talons: 
	Glory
	Inspiration, Rage, Strength
Bone Shadows: 
	Wisdom
	Death, Elemental, and Insight
Hunters in Darkness: 
	Purity
	Nature, Stealth, and Warding
Iron Masters: 
	Cunning
	Knowledge, Shaping, and Technology
Storm Lords: 
	Honor
	Evasion, Dominance, and Weather

--

Anchors: 
Anchors keep Uratha grounded. They’re concepts, philosophies, people, places, 
and things that help her find herself when lost. Werewolf: The Forsaken 
characters have three Anchors: Blood, Bone, and Touchstones

Blood: thingy
Bone: thingy
Touchstone: thingy

--

AUSPICE
From a character creation standpoint, auspice offers you a free dot of one of 
three Skills, and one of your starting Renown dots. You can choose any of the 
three auspice Skills, but this free dot cannot take the Skill beyond five dots. 
Mark the Renown dot in the relevant Renown category.

TRIBE
Each tribe has an associated Renown. Mark a dot in that Renown.

GIFTS AND RITES
Start with one Facet of your auspice’s Moon Gift. Choose one Facet each of two 
Shadow Gifts from tribe or auspice. Choose one facet of a Wolf Gift, or the 
second Facet of your Moon Gift if you have two dots in your auspice Renown. You 
cannot choose a Facet in which your character has no dots of Renown.

	Aspirations 3 + 1 Totem
	Attributes 5/4/3
	Skills 11/7/4 (+3 Specialties)
	Auspice, Tribe
	Primal Urge 1
	Renown 1 auspice, 1 tribe, 1 free
	1 Moon Gift, 2 Shadow Gifts, 1 Moon/Wolf Gift
	Merits 10

--

Wolf-Blooded: p. 296

--

Primal Urge chart: p.93
Shapeshifting chart: p.96
Renown (& effective rank): p.98-9
Harmony: p.104
Merits: pp.105-110
Gifts: p.114

*/






/*
** TO DO! **
================================================================================
== TOTEM ASPIRATION ============================================================

p. 92

*/


/*
================================================================================
== SPEND/REGAIN ESSENCE ========================================================

expands: 9c - Spend and Regain

	spend essence=<amt/method> for <reason>

spend limit per Primal Urge: 
	1 2 3 4 5 6 7 8 10 15

regain methods:
	moon (once/night)
	locus
	rite of the spirit hunt
	cannibalism


--------------------------------------------------------------------------------
-- Spend/Regain Methods --------------------------------------------------------
*/

&regain.methods.essence psrs=|all
&spend.methods.essence psrs=[@@( nothing but numeric allowed here )]


/* 
--------------------------------------------------------------------------------
-- Spend/Regain Essence Amts ---------------------------------------------------
*/

&amt.spend.numeric.essence psrs=
	if( t( u( amt.spend.numeric.default, %0, %1, %2 )), 
		if( 
			lte( %2, 
				elements( 
					1 2 3 4 5 6 7 8 10 15, 
					getstat( %0/Primal Urge )
				)
			), 
			mul( %2, -1 ), 
			#-1 You can't spend that much at one time 
		), 
		u( amt.spend.numeric.default, %0, %1, %2 )
	)


/* 
--------------------------------------------------------------------------------
-- Spend Essence Trigger -------------------------------------------------------
*/

&spend.trigger.essence psrs=
	think strcat( 
		m:, %b, setr( m, u( f.match-method, spend, essence, %2 )), %r, 
		a:, %b, setr( a, u( amt.spend, %1, essence, %qm )), %r, 
		u:, %b, setr( u, hasattr( %1, advantage.Primal_Urge )), %r, 
		s:, %b, setr( s, hasattr( %1, advantage.Essence_Maximum )), %r, 
	); 

	@assert cand( %qu, %qs )={ 
		@pemit %0=u( .msg, essence/spend, 
			cat( 
				if( strmatch( %0, %1 ), You, name( %1 )), 
				Must have both Primal Urge and an Essence pool 
			)
		) 
	}; 

	@assert strlen( %qm )={ 
		@pemit %0=u( .msg, essence/spend, I could not find the method '%2' ) 
	}; 

	@assert t( %qa )={ 
		@pemit %0=u( .msg, essence/spend, rest( %qa )) 
	}; 

	@assert t( setr( e, u( f.pool.canchange, %1, Essence, %qa )))={ 
		@pemit %0=u( .msg, essence/spend, rest( %qe )) 
	}; 

	@assert t( setr( e, u( f.pool.changestat, %1, essence, %qa )))={ 
		@pemit %0=u( .msg, essence/spend, rest( %qe )) 
	}; 

	think e: 
		[setr( e, 
			u( display.number, %0, %1, essence, spend, %qa, %qm, %4 )
		)]; 
	@eval u( f.announcement, %0, %1, spend, %qe ); 


/* 
--------------------------------------------------------------------------------
-- Regain Essence Trigger ------------------------------------------------------
*/

&regain.trigger.essence psrs=
	think strcat( 
		m:, %b, setr( m, u( f.match-method, regain, essence, %2 )), %r, 
		a:, %b, setr( a, u( amt.regain, %1, essence, %qm )), %r, 
		u:, %b, setr( u, hasattr( %1, advantage.Primal_Urge )), %r, 
		s:, %b, setr( s, hasattr( %1, advantage.Essence_Maximum )), %r, 
	); 

	@assert cand( %qu, %qs )={ 
		@pemit %0=u( .msg, essence/regain, 
			cat( 
				if( strmatch( %0, %1 ), You, name( %1 )), 
				Must have both Primal Urge and an Essence pool 
			)
		) 
	}; 

	@assert strlen( %qm )={ 
		@pemit %0=u( .msg, essence/regain, I could not find the method '%2' ) 
	}; 

	@assert t( %qa )={ 
		@pemit %0=u( .msg, essence/regain, rest( %qa )) 
	}; 

	@assert t( setr( e, u( f.pool.canchange, %1, Essence, %qa )))={ 
		@pemit %0=u( .msg, essence/regain, rest( %qe )) 
	}; 

	@assert t( setr( e, u( f.pool.changestat, %1, essence, %qa )))={ 
		@pemit %0=u( .msg, essence/regain, rest( %qe )) 
	}; 

	think e: 
		[setr( e, 
			u( display.number, %0, %1, essence, regain, %qa, %qm, %4 )
		)]; 
	@eval u( f.announcement, %0, %1, regain, %qe ); 

