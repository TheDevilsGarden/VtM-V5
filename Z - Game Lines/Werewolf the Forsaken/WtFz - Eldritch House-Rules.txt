
/*
Werewolf Chargen House Rules

================================================================================
== CHARGEN: GIFTS & FACETS =====================================================

Take 1 Moon Gift Facet for every dot in your Auspice Renown.
Pick two Shadow Gifts (one from Tribe list, one from Auspice list) to have unlocked, and take 1 Facet from these Gifts for every dot of Renown (Facet must belong to the Renown dot linked to it); may take Wolf Gift Facets instead.
If you have 2 dots in your Auspice Renown, that second dot nets you a Wolf Gift Facet rather than a Shadow Gift Facet (see Werewolf House Rules on the wiki).

So if someone has 2 Cunning, they will have 2 Facets of Cunning across their two Shadow Gifts and any Wolf Gift.

v: auspice renown's value
z: auspice gift (gift.<moon>'s_gift)

*/

&check.gifts [v( d.cg )]=
	strcat( 
		setq( g, u( f.allocated.gifts, %0 )), 
		wdivider( Chargen Levels: Gifts ), %r, 

		u( check.gifts.moon, %0, %qg ), 
		u( check.gifts.auspice, %0, %qg ), 
		u( check.gifts.tribe, %0, %qg ), 
		u( check.gifts.wolf, %0, %qg ), 
		u( check.gifts.facets, %0, %qg ), 
		u( check.gifts.other, %0, %qg ), 
	)

// -- 

think u( v( d.cg )/check.gifts, %# )

// -- moon gifts --
// 1 level per dot of auspice's renown
// 0: %0 - 1: %qg

&check.gifts.moon [v( d.cg )]=
	strcat( 
		setq( a, u( v( d.dd )/.value_full, %0, bio.auspice )), 
		setq( r, 
			filter( v( d.sfp )/fil.list-stats-tags, 
				lattr( v( d.dd )/renown.* ), , , %qa 
			)
		), 
		setq( v, u( v( d.dd )/.value, %0, %qr )), 
		setq( x, elements( %1, 1, ` )), 
		setq( z, gift.%qx ), 

		%b%b, 
		ansi( h, Moon Gift ), :, %b, 
		titlestr( edit( itemize( %qx ), _, %b )), %b, 
		u( display.check.ok-no, setr( k, eq( words( %qx ), 1 ))), %r, 

// .. moon facets ..
		setq( f, 
			setdiff( 
				u( v( d.dd )/.value_full, %0, %qz ), 
				unlock, . 
			)
		), 
		%b %b%b, ansi( h, Moon Facets ), :, %b, 
		setr( x, words( %qf, . )), /, %qv, 
		%b, u( display.check.ok-no, eq( %qx, %qv )), %r, 
	)


// -- shadow gifts: auspice --
// 0: %0 - 1: %qg 

&check.gifts.auspice [v( d.cg )]= 
	strcat( 
		%b%b, 
		ansi( h, Shadow Gift%, Auspice ), :, %b, 
		titlestr( edit( itemize( setr( x, elements( %1, 2, ` ))), _, %b )), %b, 
		u( display.check.ok-no, eq( words( %qx ), 1 )), %r, 
	)

// -- shadow gifts: tribe --
// 0: %0 - 1: %qg 

&check.gifts.tribe [v( d.cg )]= 
	strcat( 
		%b%b, 
		ansi( h, Shadow Gift%, Tribe ), :, %b, 
		titlestr( edit( itemize( setr( x, elements( %1, 3, ` ))), _, %b )), %b, 
		setq( k, 
			eq( 
				words( %qx ), 
				mul( 1, 
					setr( w, u( v( d.dd )/.is_not, %0, tribe, Ghost Wolves ))
				)
			)
		), 
		u( display.check.ok-no, %qk ), %r, 
	)

// -- wolf gifts --
// may not have any; facets may have to match auspice renown 
/*
	set [auspice renown]
	if num( [auspice renown] ) >= 2, 
		set [num auspice wolf gift facets] = num( [auspice renown] ) - 1
	set [count wolf gifts (<auspice renown>)]
	if [count wolf gifts (<auspice renown>)] >= [num auspice wolf gift facets]
		OK!
	else
		Not Enough
*/

&check.gifts.wolf [v( d.cg )]= 
	strcat( 
		setq( x, elements( %1, 4, ` )), 
		if( words( %qx ), 
			strcat( 
				setq( a, 
					filter( 
						v( d.sfp )/fil.list-stats-tags, 
						lattr( v( d.dd )/renown.* ), , , 
						get( %0/_bio.auspice )
					)
				), 
				setq( v, get( %0/_%qa )), 
				setq( f, iter( %qx, get( %0/_gift.%i0 ), , . )), 
				setq( n, words( graball( %qf, rest( %qa, . ), . ), . )), 

				%b%b, 
				ansi( h, Wolf Gifts ), :, %b, 
				titlestr( edit( itemize( %qx ), _, %b )), 
				if( cand( gte( %qv, 2 ), lt( %qn, dec( %qv ))), 
					ansi( 
						n, %r %b, 
						r, %(you must have at least%b, 
						r, dec( %qv ), 
						r, %b, 
						r, titlestr( rest( %qa, . )), 
						r, %bFacets in your Wolf Gifts%) 
					), 
				), 
				%r 
			)
		)
	)


// -- facets: shadow/wolf facets by renown --
// (using the cheapest filter)

&check.gifts.facets [v( d.cg )]= 
	strcat( 
		setq( s, lattr( %0/_renown.* )), 
		setq( r, 
			lcstr( 
				filter( v( d.sfp )/fil.list-stats-tags, 
					%qs, , , get( %0/_bio.renown ) 
				)
			)
		), 
		setq( s, lcstr( edit( %qs, _RENOWN., ))), 

		iter( setunion( %qr, %qs ), 
			strcat( 
				setq( x, 
					ladd( iter( setunion( %1, , `, %b ), 
						u( v( d.dd )/.list_has, %0, gift.%i0, %i1 )
					))
				), 
				setq( v, u( v( d.dd )/.value, %0, renown.%i0 )), 
				if( strmatch( %qv, ), setq( v, 0 )), 

				%b %b%b, 
				ansi( h, capstr( %i0 ), h, %b, h, Facets ), :, %b, 
				%qx/%qv, 
				%b, u( display.check.ok-no, eq( %qx, %qv )), 
			), 
			, %r 
		), %r, 
	)

// -- other: gifts unclaimed by above, always wrong --

&check.gifts.other [v( d.cg )]= 
	strcat( 
		setq( x, elements( %1, 5, ` )), 
		setq( k, eq( words( %qx ), 0 )), 
		if( not( %qk ), 
			strcat( 
				%b%b, 
				ansi( h, Other Gifts ), :, %b, 
				titlestr( edit( itemize( %qx ), _, %b )), %b, 
				u( display.check.ok-no, %qk ), %r, 
			)
		), 
	)

/*
================================================================================
== MERIT.CLEAR-SIGHTED =========================================================

Allowed for 'wolf-blooded' and 'stigmatic'.

*/

@fo me=&tags.merit.clear-sighted d:t=
	strcat( 
		setr( a, get( d:t/tags.merit.clear-sighted )), 
		if( 
			not( match( get( d:t/tags.merit.clear-sighted ), wolf-blooded, . )), 
			.wolf-blooded 
		)
	)


/*
================================================================================
== MERIT.TELL_() ===============================================================

WEREWOLF HOUSE RULE: Wolf-Blooded & Tell () Merit

Deviant says, “WB can take the Tell Merit a number of times equal to their highest Resistance Attribute.”
Deviant says, “Or, rather, can have a number of tells equal to.”
Deviant says, “So if you have, say, Stamina 5, you can have your Tell + 4 more.”

================================================================================
== CHARGEN: RENOWN =============================================================

Eldritch House Rule: Limit any Renown to 2 at Chargen.

*/
