================================================================================
== XP COST DATABASE ============================================================

xp.<approximate stat path>
xp.<specific stat path>
If there's no general or no specific, it cannot be bought.
If the XP path's value is set to 0, it cannot be bought.

Buying XP must also follow Prerequeisites.

	%0: dbref of sheet
	%1: from
	%2: to
	%3: name of stat, sans instance

XP Cost Databse <xpcd>: #388 

--------------------------------------------------------------------------------
-- Set-Up Work -----------------------------------------------------------------

These mimic the functions on the DD.

&f._value #388=first(u(%0/_%1), .)
&f._at_least #388=gte(add(u(f._value, %0, %1), %3), %2)
&f._is #388=strmatch(%2, u(f._value, %0, %1))


--------------------------------------------------------------------------------
-- nWoD Standard XP Cost -------------------------------------------------------

think [setq(f, 0)][setq(t, 4)][setq(x, 2)][ladd(iter(lnum(inc(%qf), %qt), mul(%i0, %qx)))]

@@ %0: xp cost, %1: from, %2: to

&f.cost.standard #388=ladd(iter(lnum(inc(%1), %2), mul(%i0, %0)))


--------------------------------------------------------------------------------
-- nWoD Direct-Level XP Cost ---------------------------------------------------

think [setq(t, 4)][setq(x, 2)][mul(%qt, %qx)]

@@ %0: xp cost, %1: to

&f.cost.direct #388=mul(%1, %0)


--------------------------------------------------------------------------------
-- nWoD Single-Cost XP Cost ----------------------------------------------------

think [setq(f, 4)][setq(t, 5)][setq(x, 8)][mul(%qx, sub(%qt, %qf))]

@@ %0: xp cost, %1: from, %2: t0

&f.cost.single #388=mul(%0, sub(%2, %1))


--------------------------------------------------------------------------------
-- Costs -----------------------------------------------------------------------

-- Simple Costs ----------------------------------------------------------------

&xp.attribute #388=u(f.cost.standard, 5, %1, %2)

From Winter Masques, p.107
>> Coyote: if the character possesses the Vice of Gluttony, Greed 
>> or Lust, the character may then buy Manipulation dots at a reduced
>> experience point rate (new dots x 4).
>> NOTE: House Rule has negated this benefit.

&xp.skill #388=u(f.cost.standard, 3, %1, %2)
&xp.skill.?.? #388=3

@@ Certain Lodges: New Dots x 2 instead of x 3
&xp.skill.brawl #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Garm), 2, 3), %1, %2)
&xp.skill.weaponry #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Garm), 2, 3), %1, %2)
&xp.skill.athletics #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Garm), 2, 3), %1, %2)
&xp.skill.persuasion #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Garm), 2, 3), %1, %2)

&xp.skill.intimidation #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Ruin), 2, 3), %1, %2)
&xp.skill.streetwise #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Ruin), 2, 3), %1, %2)
&xp.skill.survival #388=u(f.cost.standard, if(u(f._is, %0, bio.lodge, Ruin), 2, 3), %1, %2)



From Skinchangers, p. 33:
>> Other Aspects cost five experience points per
>> point. Increasing an Aspect with variable levels
>> is increased in the manner of other Merits
&xp.aspect #388=u(f.cost.standard, 5, %1, %2)

&xp.aspect.imitate_gift.? #388=0


-- Advantage Costs -------------------------------------------------------------

&xp.advantage.willpower #388=u(f.cost.single, 8, %1, %2)

--

@@ &xp.advantage.morality #388=u(f.cost.standard, 3, %1, %2)

&xp.advantage.morality #388=
case(1, 
	u(f._is, %0, bio.tradition, Apostle of the Dark One), 
	u(f.cost.standard, 4, %1, %2), 

	u(f.cost.standard, 3, %1, %2)	
)

From Second Sight, p. 83
>> Regaining lost Morality is challenging for apostles. Experience points
>> required to raise Morality equal new dots x 4 rather than the usual three
>> multiplier.

--

&xp.advantage.clarity #388=u(f.cost.standard, 3, %1, %2)

&xp.advantage.wyrd #388=u(f.cost.standard, 8, %1, %2)

--

&xp.advantage.harmony #388=u(f.cost.standard, 3, %1, %2)

&xp.advantage.primal_urge #388=u(f.cost.standard, 8, %1, %2)


-- Merit Costs -----------------------------------------------------------------

&xp.merit #388=u(f.cost.standard, 2, %1, %2)

--

@@ spring mantle 3+ has a discount on contacts 

&xp.merit.contacts #388=
	case(1, 
		u(f._at_least, %0, merit.mantle_(spring), 3), 
		u(f.cost.standard, 1, %1, %2), 
		u(f.cost.standard, 2, %1, %2)
	)

&xp.merit.allies_() #388=
	case(1, 
		u(f._at_least, %0, merit.mantle_(spring), 3), 
		u(f.cost.standard, 1, %1, %2), 
		u(f.cost.standard, 2, %1, %2)
	)

--

@@ Milestone Merits cannot be bought, so setting their xp to 0

&xp.merit.milestone #388=0

--

From Lords of Summer, p. 45
>> Bodhisattvas of the Broken Cage: Because of the entitlementâ€™s reputation as
>> flighty, gaining Court Goodwill with other Courts is difficult for the
>> Bodhisattvas. Court Goodwill gained after joining the Bodhisattvas of the
>> Broken Cage costs 3 experience points per new dot level rather than two.
>> NOTE: This Entitlement is not yet in.

--

&xp.merit.pack_totem_() #388=u(f.cost.single, 3, %1, %2)

--

@@ x5 for most, x4 for Ithaeur (an auspice)
&xp.merit.rituals #388=u(f.cost.standard, if(u(f._is, %0, bio.auspice, ithaeur), 4, 5), %1, %2)

--

@@ Wyrd Evolution is Dual Kith post-chargen
@@ 1st new kith is 10 xp, 2nd new kith is 15 xp

&xp.merit.wyrd_evolution #388=ladd(iter(lnum(inc(%1), %2), add(5, mul(%i0, 5))))



-- Contract Costs --------------------------------------------------------------

&xp.goblin_contract #388=u(f.cost.direct, 3, %2)

--

@@ seeming/general/court = affinity
@@ kith = semi-affinity (a house-rule based on Manikin and Shadowsoul)
@@ otherwise = non-affinity

&xp.contract #388=
	case(1, 
@@ .. affinity: seeming, general (universal), or court mantle
		or(
			hastag?(%3, [u(f._value, %0, bio.seeming)].general), 
			hastag?(%3, u(f._value, %0, bio.court))
		), 
		u(f.cost.standard, 4, %1, %2), 

@@ .. "out of sync" affinity: kiths that allow access to a contract
		hastag?(%3, getstat(%0/kith)), 
		u(f.cost.standard, 5, %1, %2), 

@@ .. non-affinity: everything else
		u(f.cost.standard, 6, %1, %2)
	)

--

@@ "semi-affinity" on the half-price rule rounds up
@@ this only works 1 dot at a time, so we need to hit it a number of times
@@ We concentrate on the 'to' numbers.  1 -> 3 would look at 2 then 3.

&xp.contract.elements_() #388=
ladd(iter(
	lnum(inc(%1), %2), 
	case(1, 
		lte(%i0, 
			u(f.lmax, 
				iter(lattr(%0/_contract.elements_(*)), first(u(%0/%i0), .))
			)
		), 
		ceil(fdiv(u(xp.contract, %0, dec(%i0), %i0, %3), 2)), 
		u(xp.contract, %0, dec(%i0), %i0, %3)
	)
))


&xp.contract.fang_and_talon_() #388=
ladd(iter(
	lnum(inc(%1), %2), 
	case(1, 
		lte(%i0, 
			u(f.lmax, 
				iter(
					lattr(%0/_contract.fang_and_talon_(*)), 
					first(u(%0/%i0), .)
				)
			)
		), 
		ceil(fdiv(u(xp.contract, %0, dec(%i0), %i0, %3), 2)), 
		u(xp.contract, %0, dec(%i0), %i0, %3)
	)
))

&xp.contract.communion_() #388=
ladd(iter(
	lnum(inc(%1), %2), 
	case(1, 
		lte(%i0, 
			u(f.lmax, 
				iter(lattr(%0/_contract.communion_(*)), first(u(%0/%i0), .))
			)
		), 
		ceil(fdiv(u(xp.contract, %0, dec(%i0), %i0, %3), 2)), 
		u(xp.contract, %0, dec(%i0), %i0, %3)
	)
))


@@ maybe we can do this as: xp.contract.?_(), but we'll see



-- Rite Costs ------------------------------------------------------------------

@@ 'Ithaeur' auspice (crescent-moon) gets rites for 1 instead of 2

&xp.rite #388=u(f.cost.direct, if(u(f._is, %0, bio.auspice, ithaeur), 1, 2), %2)


-- Renown Costs ----------------------------------------------------------------

@@ Affinity: Tribe or Auspice
@@ Semi-Affinity: Some Lodges
@@ Non-Affinity: All others

&xp.renown #388=
	case(1, 
@@ .. affinity: tribe, auspice, or general (universal)
		hastag?(%3, 
			[u(f._value, %0, bio.tribe)].
			[u(f._value, %0, bio.auspice)].
			general
		), 
		u(f.cost.standard, 6, %1, %2), 

@@ .. "out of sync" affinity: lodges that allow access
		hastag?(%3, getstat(%0/lodge)), 
		u(f.cost.standard, 7, %1, %2), 

@@ .. non-affinity: everything else
		u(f.cost.standard, 8, %1, %2)
	)


-- Gift Costs ------------------------------------------------------------------

@@ Gift levels can be purchased directly.
@@ Affinity: Tribe or Auspice
@@ Semi-Affinity: Some Lodges
@@ Non-Affinity: All others

0: (player ?) dbref
1: level from (used for determining 'out of order')
2: level bought
3: stat name to find tags for

&xp.gift #388=
	add(
		case(1, 
@@ .. affinity: tribe, auspice, lodge, or general (universal)
			or(
				hastag?(%3, [u(f._value, %0, bio.auspice)].general), 
				hastag?(%3, u(f._value, %0, bio.tribe)), 
				hastag?(%3, u(f._value, %0, bio.lodge)), 
			), 
			u(f.cost.direct, 5, %2), 

@@ .. "out of sync" affinity: lodges that allow access
			hastag?(%3, getstat(%0/lodge)), 
			u(f.cost.direct, 6, %2), 

@@ .. non-affinity: everything else
			u(f.cost.direct, 7, %2)
		), 
@@ >> + skipped levels
		mul(3, words(setdiff(lnum(1, %2), [edit(%1, ., %b)] %2)))
	)


--

Lodge of Prophecy allows -5xp for the 5th dot of Insight (don't ask)

&xp.gift.insight #388=
	sub(
		u(xp.gift, %0, %1, %2, %3), 
		if(
			and(
				strmatch(u(f._value, %0, bio.lodge), Prophecy), 
				eq(%2, 5)
			), 
			5, 
			0
		)
	)


-=-=-=-=-=-=-=-=-=-=-=-=-=


This version of lmax/lmin would need wiz-privileged, and I don't feel like exposing it to side-effect functions

&f.lmax #388=fold(f.lmax.fold, %0)
&f.lmax.fold #388=max(%0, %1)

&f.lmin #388=fold(f.lmin.fold, %0)
&f.lmin.fold #388=min(%0, %1)
