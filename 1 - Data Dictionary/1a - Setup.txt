================================================================================
== SETUP =======================================================================

@create Data Dictionary <dd>
@set dd=inherit safe

@parent dd=codp
&prefix.functions dd=.
&prefix.attributes dd=attribute.
&prefix.skills dd=skill.
&prefix.merits dd=merit.
&prefix.advantages dd=advantage.
&prefix.bio dd=bio.
&prefix.specials dd=special.
&prefix.health dd=health.


================================================================================
== FUNCTIONS ===================================================================

Data Dictionary Prerequisite Shortcut Functions

We put these on _ for two reasons.  The main one is the DD is @set visual to let the derived stats call on this object from any dbref.  The second is to keep it out of the hands of any code which might troll the Data Dictionary (such as setting up templates).


--------------------------------------------------------------------------------
-- Summary ---------------------------------------------------------------------

"This stat" means "this stat's final value".

For almost all of these, the following variables are passed:
	0: sheet dbref
	1: complete.stat.path
	2: comparison value
	3: value this stat (with the prereq on it) is being adjusted by

Class - Numeric, String, List, or Peppermint.
	.Class			(see above)

Value - Current value of a stat,.
	.Value			Numeric. Unadjusted value.
	.Value_Full		Any. Untouched attribute.
	.Value_Stats	Numeric. Summed value of a list of statpaths.

At Least - Numeric. Statpath(s) passed are >= ("at least") value(s) passed.
	.At_Least		This stat is at least value.
	.At_Least_All	Other stats are at least value.
	.At_Least_One	One of other stats is at least value.
	.At_Least_Stat	This stat is at least value of another stat.

At Most - Numeric. Opposite of "At Least", Stat <= Value.
	.At_Most		
	.At_Most_All	
	.At_Most_One	
	.At_Most_Stat	

Is - Direct comparison of stat's value.
	.Is				Numeric. Stat's value is 'x'.
	.Is_Full		Any. Stat's contents is 'x'.
	.Is_Not			Numeric. Stat's value is not 'x'.
	.Is_One_Of		Numeric. Stat's value matches one of a dot-delim list.
	.Is_None_Of		Numeric. Opposite of "is one of", above.

Has - Any. Checking for existance of stats.
	.Has			Stat exists on sheet.
	.Has_Not		Stat doesn't exist on sheet.
	.Has_All_Of		Stats listed all exist on sheet.
	.Has_None_Of	Stats listed all do not exist on sheet.

Min/Max Of - Can't remember right now.	
	.Min_Of			...
	.Max_Of			...

Core Stat Checks - 
	.Max_Trait		...
	.Trait_Check	...

Werewolf Stat Checks - 
	.Rites_Check	...
	.Gifts_Check	...
	.Renown_Check	...



--------------------------------------------------------------------------------
-- Class -----------------------------------------------------------------------

What is the class of the stat?
	0: stat path

&.Class dd=udefault( class.%0, numeric )


--------------------------------------------------------------------------------
-- Value -----------------------------------------------------------------------

The "value" directive just pulls the permanent part of a numeric stat (such as Strength) or the first item from a text list (such as Template, which can be Human.Psionic).

--

Value of a primary stat, or the first item of a list
	0: sheet dbref
	1: stat.path
	e.g.:
		u(.value, %0, attribute.strength)

&.Value dd=
	case(u(.class, %1), 
		numeric, first(u(.value_full, %0, %1), .), 
		u(.value_full, %0, %1)
	)

--

Full text on a stat ("both" for numeric stats)
	0: sheet dbref
	1: stat.path
	e.g.:
		u(.value_full, %0, bio.template)

&.Value_Full dd=
	udefault( 
		[u( d.sfp )]/f.getstat.workhorse.[u( .class, %1 )], 
		u( %0/_%1 ), 
		%0, _%1 
	)

--

Total value of a numeric trait
	0: sheet dbref
	1: list.of stat.paths
	e.g.:
		u(.value_stats, %0, attribute.strength skill.brawl)

&.Value_Stats dd=
	ladd( iter( %1 , u( .value_full, %0, %i0 ), , . ), . )



--------------------------------------------------------------------------------
-- At Least --------------------------------------------------------------------

The "at" directives check that a stat is "at least" (equal to or greater than) another value.  Sometimes that other value is another stat.

Pass %2 from the &prerequisite.<statpath> when the stat we're comparing is "this" stat, aka the stat in <statpath>.  This is required to make cgen/xp spends to properly see if the new value of "this stat" meets prerequisites.

--

Stat is no lower than a value
	0: sheet dbref
	1: stat.path
	2: min value
	3: add-offset (send "%2" when stat.path is self)
	e.g.:
		u(.at_least, %0, skill.empathy, 2)

&.At_Least dd=
	gte(add(u(.value, %0, %1), %3), %2)

--

Stats passed are all no lower than values associated ("and _at_least")
	0: sheet dbref
	1: stat.path:value|stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u(.at_least_all, %0, attribute.dexterity:3 skill.athletics:2)

&.At_Least_All dd=
	land(iter(%1, u(.at_least, %0, first(%i0, :), rest(%i0, :))))

--

One stat passed is no lower than values associated ("or _at_least")
	0: sheet dbref
	1: stat.path:value|stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u(.at_least_one, %0, skill.weaponry:2 skill.firearms:2)

&.At_Least_One dd=
	lor(iter(%1, u(.at_least, %0, first(%i0, :), rest(%i0, :))))

--

This stat is no lower than another stat
	0: sheet dbref
	1: this.statpath
	2: that.statpath
	3: add-offset (send "%2" always, used in xp-spends)
	e.g.:
		u(.at_least_stat, %0, merit.fame, attribute.presence, %2)
		u(.at_least_stat, %0, merit.hollow_(%1).size, advantage.wyrd + 2, %2)

&.At_Least_Stat dd=
localize(
@@ .. sloppy, but gets the job done
	[setq(t, trim(first(edit(%2, -, +-), +)))]
	[setq(a, iter(rest(edit(edit(%2, -%b, -), -, %b+-), +), %i0, +))]
	[u(
		.at_least, 
		%0, 
		%1, 
		ladd(
			[u(.value, %0, %qt)] 
			%qa
		), 
		%3
	)]
)


--------------------------------------------------------------------------------
-- At Most ---------------------------------------------------------------------

Same as "At Least", only checks that things are "at most" (equal to or less than) a value.

Pass %2 from the &prerequisite.<statpath> when the stat we're comparing is "this" stat, aka the stat in <statpath>.  This is required to make cgen/xp spends to properly see if the new value of "this stat" meets prerequisites.

--

Stat is no higher than a value
	0: sheet dbref
	1: stat.path
	2: value
	3: add-offset (send "%2" when stat.path is self, used in xp-spends)
	e.g.:
		u(.at_most, %0, power.fubar, 3, %2)

&.At_Most dd=
	lte(add(u(.value, %0, %1), %3), %2)

--

Stats passed are all no higher than values associated ("and _at_most")
	0: sheet dbref
	1: stat.path:value stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u(.at_most_all, %0, attribute.strength:4 skill.athletics:1)

&.At_Most_All dd=
	land(iter(%1, u(.at_most, %0, first(%i0, :), rest(%i0, :))))

--

One stat passed is no higher than values associated ("or _at_most")
	0: sheet dbref
	1: stat.path:value|stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u(.at_most_one, %0, merit.fame:3 attribute.presence:3)

&.At_Most_One dd=
	lor(iter(%1, u(.at_most, %0, first(%i0, :), rest(%i0, :))))

--

This stat is no higher than another stat
	0: sheet dbref
	1: this.statpath
	2: that.statpath(+/-<value>)
	3: add-offset (send "%2" always, used in xp-spends)

	t: that.statpath
	a: add value(s)

	e.g.:
		u(.at_most_stat, %0, merit.hidden_life, advantage.wyrd, %2)
		u(.at_most_stat, %0, skill.academics, advantage.wyrd+1, %2)

&.At_Most_Stat dd=
localize(
@@ .. sloppy, but gets the job done
	[setq(t, trim(first(edit(%2, -, +-), +)))]
	[setq(a, iter(rest(edit(edit(%2, -%b, -), -, %b+-), +), %i0, +))]
	[u(
		.at_most, 
		%0, 
		%1, 
		ladd(
			[u(.value, %0, %qt)] 
			%qa
		), 
		%3
	)]
)


--------------------------------------------------------------------------------
-- Is --------------------------------------------------------------------------

Intended for list stats, "is" compares the stat's primary (first) value to another or against a list.  Can be used with numeric stats as well if an exact match needs to be found, but it's discouraged.

--

Stat's "first" text value matches exactly
	0: sheet dbref
	1: stat.path
	2: value (text)
	3: stat being set (ignore sheet value if passed)
	e.g.:
		u(.is, %0, bio.kith, shadowsoul)
		u(.is_full, %0, bio.seeming, seemingless, %2)

&.Is dd=
	strmatch(%2, if(t(%3), %3, u(.value, %0, %1)))

--

Stat's "full" value matches
	0: sheet dbref
	1: stat.path
	2: value (text)
	3: stat being set (ignore sheet value if passed)
	e.g.:
		u(.is_full, %0, bio.template, human.fae-touched)
		u(.is_full, %0, bio.template, changeling, %2)

&.Is_Full dd=
	strmatch(%2, if(t(%3), %3, u(.value_full, %0, %1)))


--

Stat's "first" text value doesn't match
	0: sheet dbref
	1: stat.path
	2: value (text)
	3: stat being set (ignore sheet value if passed)
	e.g.:
		u(.is_not, %0, advantage.vice, pride)
		u(.is_not, %0, bio.seeming, seemingless, %2)

&.Is_Not dd=
	not(u(.is, %0, %1, %2, %3))

--

Stat's "first" text item matches one from a list
	0: sheet dbref
	1: stat.path
	2: one.of.list
	e.g.:
		u(.is_one_of, %0, bio.template, changeling.human)

&.Is_One_Of dd=
	t(match(%2, first(u(%0/_%1), .), .))

--

Stat's "first" text value matches none from a list
	0: sheet dbref
	1: stat.path
	2: one.of.list
	e.g.:
		u(.is_none_of, %0, bio.kith, %1.Kithless)

&.Is_None_Of dd=
	not(u(.is_one_of, %0, %1, %2))


--------------------------------------------------------------------------------
-- Has -------------------------------------------------------------------------

The "has" directives check to see if a stat (or a list of stats) exists (or don't exist) on someone's sheet.

--

Sheet has a stat
	0: sheet dbref
	1: stat.path
	e.g.:
		u(.has, %0, skill.crafts)

&.Has dd=
	t(u(.value, %0, %1))

--

Sheet doesn't have a stat
	0: sheet dbref
	1: stat.path
	e.g.:
		u(.has_not, %0, merit.fame)

&.Has_Not dd=
	not(u(.value, %0, %1))

--

Sheet has one of the stats from a list
	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u(.has_one_of, %0, merit.clairvoyance merit.channeling_(spirit))

&.Has_One_Of dd=
	lor(iter(%1, u(.has, %0, %i0)))

--

Sheet has all of the stats from a list
	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u(.has_all_of, %0, merit.astral_projection merit.thought_projection)

&.Has_All_Of dd=
	land(iter(%1, u(.has, %0, %i0)))

--

Sheet has none of the stats from a list
	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u(.has_none_of, %0, merit.occlusion merit.hidden_life)

&.Has_None_Of dd=
	not(u(.has_one_of, %0, %1))


--------------------------------------------------------------------------------
-- Min Of/Max Of ---------------------------------------------------------------

Returns the lowst or highest value of a list of stats.  We have to fold our own "lmin" and "lmax" for these, hurrah.

	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u(.min_of, %0, merit.occlusion merit.hidden_life))
		u(.max_of, %0, merit.occlusion merit.hidden_life))

--

&.Min_Of dd=
	min(
		u(.value, %0, first(%1)), 
		if(
			dec(words(rest(%1))), 
			u(.min_of, %0, rest(%1)), 
			u(.value, %0, rest(%1))
		)
	)


--

&.Max_Of dd=
	max(
		u(.value, %0, first(%1)), 
		if(
			dec(words(rest(%1))), 
			u(.max_of, %0, rest(%1)), 
			u(.value, %0, rest(%1))
		)
	)


--------------------------------------------------------------------------------
-- List Has --------------------------------------------------------------------

Takes a list stat (or, for that matter, any numeric stat) and returns 1 if the item exists in it, 0 if it doesn't.  

List stats are stored: item.item.item

Item name must be exact or contain its own wildcards.

	0: sheet dbref
	1: stat.path
	2: value
	e.g.:
		u(.list_has, %0, bio.kith, runnerswift)

--

&.list_has dd=
	t(match(
		first(u(%0/_%1), |), 
		%2,
		.
	))


--------------------------------------------------------------------------------
-- Class: List -----------------------------------------------------------------

Turns the number portion of a class:list statpath and returns the name portion.
Looks up text in the value portion and, if match, returns the name portion.
Else, assumes translating name->value

(This is the first dd _function that does not use the sheet)

	0: ??
	1: ?? (I know these do something, but if they're not using the sheet...)

--

&.class_translate_list dd=
	case(1, 
@@ .. number value -> name
		isnum(%1), 
		elements(rest(v(%0), |), %1, .), 
@@ .. text value -> name
		t(match(first(v(%0), |), %1, .)), 
		elements(rest(v(%0), |), match(first(v(%0), |), %1, .), .), 
@@ .. name -> value
		elements(first(v(%0), |), match(rest(v(%0), |), %1*, .), .)
	)


--------------------------------------------------------------------------------
-- Rites, Gifts, & Renown ------------------------------------------------------

In Werewolf, all Rites need to be checked against the Rite merit.  So for each Rite, add this function to the prerequisite.

	0: sheet dbref
	1: value trying to raise to

--

&.rites_check dd=
	lte(%1, u(.value, %0, merit.rituals))

&.gifts_check dd=
	lte(%1, u(.max_of, %0, iter(lattr(%0/_renown.*), trim(%i0, b, _))))

--

At no point may a character have more dots in another Renown than he does
in his highest primary Renown.

	0: sheet dbref
	1: stat.path of renown being raised
	2: add-offset (pass %2 in &prerequisite)

	a: auspice's primary renown
	t: tribe's primary renown
	m: max of these two renowns, + offset if we're raising one of those

	e.g.: 
		think u(dd/.gifts_check, pmatch(thenomain), 1)

--

&.renown_check dd=
localize(

@@ .. grab auspice and tribe renown's 
	[setq(a, rest(first(grepi(%!, tags.renown.*, u(.value, %0, bio.auspice))), .))]
	[setq(t, rest(first(grepi(%!, tags.renown.*, u(.value, %0, bio.tribe))), .))]

@@ .. max of tribe or auspice ("primary") renowns (can't use _max_of)
	[setq(m, 
		max(
@@ .. .. if renown being raised is self, add amt it's being raised by
			add(u(.value, %0, %qa), if(strmatch(%qa, %1), %2, 0)), 
			add(u(.value, %0, %qt), if(strmatch(%qt, %1), %2, 0))
		)
	)]

	[u(.at_most, %0, %1, %qm, %2)]
)


--------------------------------------------------------------------------------
-- What's My Max Trait? --------------------------------------------------------

The more supers we get, the more generalized we need to make some of these 
things.  It's important, therefore, to be able to simply ask for the "maximum 
trait" based on general power level.

>>> When adding or removing spheres from a game, alter this -- for now <<< 

	 0: sheet dbref

think u(dd/.max_trait, num(eric russell))
think u(dd/.max_trait, num(*thenomain))

--

&.max_trait dd=
	max(
		5, 
		u(.value, 
			%0, 
			case(last(u(.value_full, %0, bio.template), .), 
				Changeling, advantage.wyrd, 
				Werewolf, advantage.primal_urge, 
@@ 				Vampire, advantage.blood_potency, 
@@ 				Promethean, advantage.azoth, 
 				Mage, advantage.gnosis, 
@@ 				Geist, advantage.psyche, 
				Skinthief, advantage.supernatural_tolerance
			)
		)
	)


--------------------------------------------------------------------------------
-- Trait Check -----------------------------------------------------------------

Like Gift Check, but for power level -> attribute/skill.  We use this so often that we're making it its own thing.

This is prefered to 'max trait' above and the above may be folded into this function, instead.

	0: sheet dbref
	1: stat.path
	2: adding to stat, if any (pass %2 to this function, as there usually is)

think u(dd/.max_trait, num(eric russell))
think u(dd/.max_trait, num(*thenomain))

--

&.trait_check dd=
	u(.at_most, %0, %1, u(.max_trait, %0), %2)


