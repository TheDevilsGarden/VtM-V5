/*
================================================================================
== NOTES =======================================================================

The following is passed to every &prerequisite.<statpath>:
	0: sheet dbref
	1: instance (if exists)
	2: value to raise by


================================================================================
== SETUP =======================================================================
*/

@create Data Dictionary <dd>
@set dd=inherit safe

@fo me=&d.sfp dd=[num( Stat Functions Prototype <sfp> )]

@parent dd=codp
&prefix.functions dd=.
&prefix.attributes dd=attribute.
&prefix.skills dd=skill.
&prefix.merits dd=merit.
&prefix.advantages dd=advantage.
&prefix.bio dd=bio.
&prefix.specials dd=special.
&prefix.health dd=health.
&prefix.conditions dd=condition.
&prefix.specials dd=special.


/*
--------------------------------------------------------------------------------
-- Data Tags -------------------------------------------------------------------

These are on its own object because the system might flood the poor lookup 
system.

In the future, notes and page references should go here as well.

*/

@create Data Tags <d:t>
@set d:t=inherit safe

@parent d:t=codp
&prefix.attributes d:t=tags.attribute.
&prefix.skills d:t=tags.skill.
&prefix.merits d:t=tags.merit.
&prefix.advantages d:t=tags.advantage.
&prefix.bio d:t=tags.bio.
&prefix.specials d:t=tags.special.
&prefix.health d:t=tags.health.
&prefix.conditions d:t=tags.condition.
&prefix.specials d:t=tags.special.



/*
================================================================================
== FUNCTIONS ===================================================================

Data Dictionary Prerequisite Shortcut Functions

We put these on _ for two reasons.  The main one is the DD is @set visual to let 
the derived stats call on this object from any dbref.  The second is to keep it 
out of the hands of any code which might troll the Data Dictionary (such as 
setting up templates).


--------------------------------------------------------------------------------
-- Summary ---------------------------------------------------------------------

"This stat" means "this stat's final value".

For almost all of these, the following variables are passed:
	0: sheet dbref
	1: instance (when exists)
	2: value to check against
	3: value this stat (with the prereq on it) is being adjusted by

Class - Numeric, String, List, or Peppermint.
	.Class			(see above)

Value - Current value of a stat,.
	.Value			Numeric. Unadjusted value.
	.Value_Full		Any. Untouched attribute.
	.Value_Stats	Numeric. Summed value of a list of statpaths.

At Least - Numeric. Statpath(s) passed are >= ("at least") value(s) passed.
	.At_Least		This stat is at least value.
	.At_Least_All	Other stats are at least value.
	.At_Least_One	One of other stats is at least value.
	.At_Least_Stat	This stat is at least value of another stat.

At Most - Numeric. Opposite of "At Least", Stat <= Value.
	.At_Most		
	.At_Most_All	
	.At_Most_One	
	.At_Most_Stat	

Between - Numeric. Both 'at least' and 'at most'
	.Between

Is - Direct comparison of stat's value.
	.Is				Numeric. Stat's value is 'x'.
	.Is_Full		Any. Stat's contents is 'x'.
	.Is_Not			Numeric. Stat's value is not 'x'.
	.Is_One_Of		Numeric. Stat's value matches one of a dot-delim list.
	.Is_None_Of		Numeric. Opposite of "is one of", above.

Has - Checking for existance of stats.
	.Has			Stat exists on sheet.
	.Has_Not		Stat doesn't exist on sheet.
	.Has_One_Of		One of stats listed exists on sheet.
	.Has_All_Of		Stats listed all exist on sheet.
	.Has_None_Of	Stats listed all do not exist on sheet.

Min/Max Of - Return a high/low value
	.Min_Of			Lowest value of a list of stats
	.Max_Of			Highest value of a list of stats

List Class Checks  - Checks specifically about the 'list' stat class
	.List_Has		'List' stat class includes value passed
	.List_Has_All	Includes all of a dot-delimited list passed
	.List_Has_Not	Includes none of a dot-delimited list passed

Core Stat Checks - Check against Supernatural Tollerance (power trait)
	.Max_Trait		How high can they take skills/attributes?
	.Trait_Check	Can they take "this" skill/attribute "that" high?
	.Sphere			Which 'sphere' (game line) do you belong to?

Specialty - Get information about specialties
	.Specialty_For  Return the skill that has the passed specialty
	.Specialty_Has  Has the specialty named in a certain or any skill


--------------------------------------------------------------------------------
-- Class -----------------------------------------------------------------------

What is the class of the stat?
	0: stat path
*/

&.Class dd=u( [u( d.sfp )]/f.get-class, %0 )


/*
--------------------------------------------------------------------------------
-- Value -----------------------------------------------------------------------

The "value" directive just pulls the permanent part of a numeric stat (such as 
Strength) or the first item from a text list (such as Template, which can be 
Human.Psionic).

-- value --

Value of a primary stat, or the first item of a list
	0: sheet dbref
	1: stat.path
	e.g.:
		u( .value, %0, attribute.strength )
*/

&.Value dd=
	case( u( .class, %1 ), 
		numeric, first( u( .value_full, %0, %1 ), . ), 
		u( .value_full, %0, %1 )
	)

/* -- value full --

Full text on a stat ("both" for numeric stats)
	0: sheet dbref
	1: stat.path
	e.g.:
		u( .value_full, %0, bio.template )
*/

&.Value_Full dd=
	udefault( 
		[u( d.sfp )]/f.getstat.workhorse.[u( .class, %1 )], 
		u( %0/_%1 ), 
		%0, _%1 
	)

/* -- value stats --

Total value of a numeric trait
	0: sheet dbref
	1: list.of stat.paths
	e.g.:
		u( .value_stats, %0, attribute.strength skill.brawl )
*/

&.Value_Stats dd=
	ladd( iter( %1 , u( .value_full, %0, %i0 ), , . ), . )



/*
--------------------------------------------------------------------------------
-- At Least --------------------------------------------------------------------

The "at" directives check that a stat is "at least" (equal to or greater than) 
another value.  Sometimes that other value is another stat.

Pass %2 from the &prerequisite.<statpath> when the stat we're comparing is 
"this" stat, aka the stat in <statpath>.  This is required to make cgen/xp 
spends to properly see if the new value of "this stat" meets prerequisites.

-- at least --

Stat is no lower than a value
	0: sheet dbref
	1: stat.path
	2: min value
	3: add-offset (send "%2" when stat.path is self)
	e.g.:
		u( .at_least, %0, skill.empathy, 2 )
*/

&.At_Least dd=
	gte( add( u( .value, %0, %1 ), %3 ), %2 )

/* -- at least all --

Stats passed are all no lower than values associated ("and _at_least")
	0: sheet dbref
	1: stat.path:value|stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u( .at_least_all, %0, attribute.dexterity:3 skill.athletics:2 )
*/

&.At_Least_All dd=
	land( iter( %1, u( .at_least, %0, first( %i0, : ), rest( %i0, : ))))

/* -- at least one --

One stat passed is no lower than values associated ("or _at_least")
	0: sheet dbref
	1: stat.path:value|stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u( .at_least_one, %0, skill.weaponry:2 skill.firearms:2 )

&.At_Least_One dd=
	lor( iter( %1, u( .at_least, %0, first( %i0, : ), rest( %i0, : ))))

/* -- at least stat --

This stat is no lower than another stat
	0: sheet dbref
	1: this.statpath
	2: that.statpath +/- stuff
	3: add-offset (send "%2" always, used in xp-spends)
	e.g.:
		u( .at_least_stat, %0, merit.fame, attribute.presence, %2 )
		u( .at_least_stat, %0, merit.hollow_(%1).size, advantage.wyrd + 2, %2 )
*/

&.At_Least_Stat dd=
	localize( 
// .. sloppy, but gets the job done
		[setq( t, trim( first( edit( %2, -, +- ), + )))]
		[setq( a, 
			iter( rest( edit( edit( %2, -%b, - ), -, %b+- ), + ), %i0, + 	)
		)]
		[u( 
			.at_least, 
			%0, 
			%1, 
			ladd( 
				[u( .value, %0, %qt )] 
				%qa 
			), 
			%3 
		)] 
	)


/*
--------------------------------------------------------------------------------
-- At Most ---------------------------------------------------------------------

Same as "At Least", only checks that things are "at most" (equal to or less 
than) a value.

Pass %2 from the &prerequisite.<statpath> when the stat we're comparing is 
"this" stat, aka the stat in <statpath>.  This is required to make cgen/xp 
spends to properly see if the new value of "this stat" meets prerequisites.

--

Stat is no higher than a value
	0: sheet dbref
	1: stat.path
	2: value
	3: add-offset (send "%2" when stat.path is self, used in xp-spends)
	e.g.:
		u( .at_most, %0, power.fubar, 3, %2 )
*/

&.At_Most dd=
	lte( add( u( .value, %0, %1 ), %3 ), %2 )

/* -- at most all --

Stats passed are all no higher than values associated ("and _at_most")
	0: sheet dbref
	1: stat.path:value stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u( .at_most_all, %0, attribute.strength:4 skill.athletics:1 )
*/

&.At_Most_All dd=
	land( iter( %1, u( .at_most, %0, first( %i0, : ), rest( %i0, : ))))

/* -- at most one --

One stat passed is no higher than values associated ("or _at_most")
	0: sheet dbref
	1: stat.path:value|stat.path:value
	(cannot be used for "this stat" situations)
	e.g.:
		u( .at_most_one, %0, merit.fame:3 attribute.presence:3 )
*/

&.At_Most_One dd=
	lor( iter( %1, u( .at_most, %0, first( %i0, : ), rest( %i0, : ))))

/* -- at most stat --
This stat is no higher than another stat
	0: sheet dbref
	1: this.statpath
	2: that.statpath(+/-<value>)
	3: add-offset (send "%2" always, used in xp-spends)

	t: that.statpath
	a: add value(s)

	e.g.:
		u( .at_most_stat, %0, merit.hidden_life, advantage.wyrd, %2 )
		u( .at_most_stat, %0, skill.academics, advantage.wyrd+1, %2 )
*/

&.At_Most_Stat dd=
	localize( 
// .. sloppy, but gets the job done
		[setq( t, trim( first( edit( %2, -, +- ), + )))]
		[setq( a, 
			iter( rest( edit( edit( %2, -%b, - ), -, %b+- ), + ), %i0, + )
		)]
		[u( .at_most, 
			%0, 
			%1, 
			ladd( 
				[u( .value, %0, %qt )] 
				%qa 
			), 
			%3 
		)] 
	)


/* 
--------------------------------------------------------------------------------
-- Between ---------------------------------------------------------------------

This stat is between *and includes* <value 1> and <value 2>
	0: sheet dbref
	1: this.statpath
	2: value 1 (low)
	3: value 2 (high)
	4: add-offset (send "%2" always, used in xp-spends)
*/

&.Between dd=
	cand( 
		u( .at_least, %0, %1, %2, %4 ), 
		u( .at_most, %0, %1, %3, %4 )
	)



/* 
--------------------------------------------------------------------------------
-- Is --------------------------------------------------------------------------

Intended for list stats, "is" compares the stat's primary (first) value to 
another or against a list.  Can be used with numeric stats as well if an exact 
match needs to be found, but it's discouraged.

-- is --

Stat's "first" text value matches exactly
	0: sheet dbref
	1: stat.path
	2: value (text)
	3: stat being set (ignore sheet value if passed)
	e.g.:
		u( .is, %0, bio.kith, shadowsoul )
		u( .is_full, %0, bio.seeming, seemingless, %2 )
*/

&.Is dd=
	strmatch( %2, if( t( %3 ), %3, u( .value, %0, %1 )))

/* -- is full --

Stat's "full" value matches
	0: sheet dbref
	1: stat.path
	2: value (text)
	3: stat being set (ignore sheet value if passed)
	e.g.:
		u( .is_full, %0, bio.template, human.fae-touched )
		u( .is_full, %0, bio.template, changeling, %2 )
*/

&.Is_Full dd=
	strmatch( %2, if( t( %3 ), %3, u( .value_full, %0, %1 )))


/* -- is not --

Stat's "first" text value doesn't match
	0: sheet dbref
	1: stat.path
	2: value (text)
	3: stat being set (ignore sheet value if passed)
	e.g.:
		u( .is_not, %0, advantage.vice, pride )
		u( .is_not, %0, bio.seeming, seemingless, %2 )
*/

&.Is_Not dd=
	not( u( .is, %0, %1, %2, %3 ))

/* -- is one of --

Stat's "first" text item matches one from a list
	0: sheet dbref
	1: stat.path
	2: one.of.list
	e.g.:
		u( .is_one_of, %0, bio.template, changeling.human )
*/

&.Is_One_Of dd=
	t( match(%2, first( u( %0/_%1 ), . ), . ))

/* -- is none of --

Stat's "first" text value matches none from a list
	0: sheet dbref
	1: stat.path
	2: one.of.list
	e.g.:
		u( .is_none_of, %0, bio.kith, %1.Kithless )
*/

&.Is_None_Of dd=
	not( u( .is_one_of, %0, %1, %2 ))


/* 
--------------------------------------------------------------------------------
-- Has -------------------------------------------------------------------------

The "has" directives check to see if a stat (or a list of stats) exists (or 
don't exist) on someone's sheet.

-- has --

Sheet has a stat
	0: sheet dbref
	1: stat.path
	e.g.:
		u( .has, %0, skill.crafts )
*/

&.Has dd=
	t( u( .value, %0, %1 ))

/* -- has not --

Sheet doesn't have a stat
	0: sheet dbref
	1: stat.path
	e.g.:
		u( .has_not, %0, merit.fame )
*/

&.Has_Not dd=
	not( u( .value, %0, %1 ))

/* -- has one of --

Sheet has one of the stats from a list
	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u( .has_one_of, %0, merit.clairvoyance merit.channeling_(spirit) )
*/

&.Has_One_Of dd=
	lor( iter( %1, u( .has, %0, %i0 )))

/* -- has all of --

Sheet has all of the stats from a list
	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u( .has_all_of, %0, merit.astral_projection merit.thought_projection )
*/

&.Has_All_Of dd=
	land( iter( %1, u( .has, %0, %i0 )))

/* -- has none of --

Sheet has none of the stats from a list
	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u( .has_none_of, %0, merit.occlusion merit.hidden_life )
*/

&.Has_None_Of dd=
	not( u( .has_one_of, %0, %1 ))


/* 
--------------------------------------------------------------------------------
-- Min Of/Max Of ---------------------------------------------------------------

Returns the lowst or highest value of a list of stats.  We have to fold our own 
"lmin" and "lmax" for these, hurrah.

	0: sheet dbref
	1: list.of stat.paths to.check
	e.g.:
		u( .min_of, %0, merit.occlusion merit.hidden_life ))
		u( .max_of, %0, merit.occlusion merit.hidden_life ))

-- min of --
*/

&.Min_Of dd=
	min( 
		u( .value, %0, first( %1 )), 
		if( 
			dec( words( rest( %1 ))), 
			u( .min_of, %0, rest( %1 )), 
			u( .value, %0, rest( %1 ))
		)
	)


// -- max of --

&.Max_Of dd=
	max( 
		u( .value, %0, first( %1 )), 
		if( 
			dec( words( rest( %1 ))), 
			u( .max_of, %0, rest( %1 )), 
			u( .value, %0, rest( %1 ))
		)
	)


/* 
--------------------------------------------------------------------------------
-- List Has --------------------------------------------------------------------

Takes a list stat (or, for that matter, any numeric stat) and returns 1 if the 
item exists in it, 0 if it doesn't.  

List stats are stored: item.item.item

Item name must be exact or contain its own wildcards.

	0: sheet dbref
	1: stat.path
	2: value
	e.g.:
		u( .list_has, %0, bio.kith, runnerswift )

-- list has --
*/

&.List_Has dd=
	t( match( u( .value_full, %0, %1 ), %2, . ))

// -- list has all --

&.List_Has_All dd=
	eq( 
		words( setinter( u( .value_full, %0, %1 ), %2, . ), . ), 
		words( %2, . )
	)

// -- list has none --

&.List_Has_None dd=
	eq( 
		words( setinter( u( .value_full, %0, %1 ), %2, . ), . ), 
		0 
	)


/* 
--------------------------------------------------------------------------------
-- Class: List -----------------------------------------------------------------

*** Hey, Theno, this is pretty good code and you should use it in stat/set! ***

Turns the number portion of a class:list statpath and returns the name portion.
Looks up text in the value portion and, if match, returns the name portion.
Else, assumes translating name->value

(This is the first dd _function that does not use the sheet)

	0: ??
	1: ?? (I know these do something, but if they're not using the sheet...)

-- class: translate list
*/

&.class_translate_list dd=
	case( 1, 
@@ .. number value -> name
		isnum( %1 ), 
		elements( rest( v( %0 ), | ), %1, . ), 
@@ .. text value -> name
		t( match( first( v( %0), |), %1, . )), 
		elements( rest( v( %0), | ), match( first( v( %0), | ), %1, . ), . ), 
@@ .. name -> value
		elements( first( v( %0), | ), match( rest( v( %0), | ), %1*, .), . )
	)


/* 
--------------------------------------------------------------------------------
-- What's My Max Trait? --------------------------------------------------------

The more supers we get, the more generalized we need to make some of these 
things.  It's important, therefore, to be able to simply ask for the "maximum 
trait" based on general power level.

>>> When adding or removing spheres from a game, alter this -- for now <<< 

Some spheres allow the max to be raised depending on a merit, and sometimes 
only for a specific stat.

	 0: sheet dbref
	 1: trait statpath [optional]

think u( dd/.max_trait, num( eric russell))
think u( dd/.max_trait, num( *thenomain ), attribute.intelligence )

-- max trait --
*/

&.max_trait dd=
	add( 
		max( 5, 
			u( .value, 
				%0, 
				udefault( 
					.max_trait.[u( .value_full, %0, bio.template )], 
					0 
				)
			)
		), 
		ladd( 
			iter( 
				lattr( %!/.max.trait.[u( .value_full, %0, bio.template )].* ), 
				u( %!/%i0, %0, %1 )
			)
		)
	)

// -- max trait (template) --

&.max_trait.Changeling dd=advantage.wyrd
&.max_trait.Werewolf dd=advantage.primal_urge
&.max_trait.Promethean dd=advantage.azoth
&.max_trait.Mage dd=advantage.gnosis
&.max_trait.Geist dd=advantage.psyche
&.max_trait.Skinthief dd=advantage.supernatural_tolerance

&.max_trait.Werewolf.Embodiment dd=
	u( .has, %0, merit.embodiment_of_the_firstborn_([rest( %1, . )]) )


/* 
--------------------------------------------------------------------------------
-- Trait Check -----------------------------------------------------------------

Like Gift Check, but for power level -> attribute/skill.  We use this so often 
that we're making it its own thing.

This is prefered to 'max trait' above and the above may be folded into this 
function, instead.

	0: sheet dbref
	1: stat.path
	2: adding to stat, if any (pass %2 to this function, as there usually is)

think u(dd/.max_trait, num( eric russell ))
think u(dd/.max_trait, num( *thenomain ), attribute.presence )

*/

&.trait_check dd=
	u( .at_most, %0, %1, u( .max_trait, %0, %1 ), %2 )


/* 
--------------------------------------------------------------------------------
-- Sphere ----------------------------------------------------------------------

Which game-line is this template from? The game-line is almost certainly the 
same name as the major template from that game-line.
(possible exception: The 'Geist' game-line has the major template 'Sin-Eater'.)

	0: sheet dbref

*/

&.sphere dd=
	localize( strcat( 
		setq( s, 
			lcstr( 
				last( 
					grepi( 
						%!, 
						.sphere.*, 
						edit( u( .value_full, %0, bio.template ), %b, _ )
					), 
					. 
				)
			)
		), 
		if( t( %qs ), %qs )
	))

// -- spheres for templates --

&.sphere.human dd=Human
&.sphere.vampire dd=Vampire Ghoul
&.sphere.demon dd=Demon Stigmatic
&.sphere.werewolf dd=Werewolf Wolf-Blooded


/* 
--------------------------------------------------------------------------------
-- Specialties -----------------------------------------------------------------

-- specialty for --

Return the skill that has the passed specialty
	0: sheet dbref
	1: specialty to find
	e.g.:
		u( .specialty_for, %0, drawing )
*/

&.Specialty_For dd=
	lcstr( 
		rest( 
			first( 
				sort( iter( lattr( %0/_skill.*.%1 ), elements( %i0, 1 2, . )))
			), 
			_ 
		)
	)

/* -- specialty has --

Does the sheet have this specialty?
	0: sheet dbref
	1: skill(s) to match, '*' means 'all'
	2: specialty to find, '*' means 'any'
	e.g.:
		u( .specialty_has, %0, Crafts Expression, * )
*/

&.Specialty_Has dd=
	gt( words( iter( %1, lattr( %0/_skill.%i0.%2 ))), 0 )
