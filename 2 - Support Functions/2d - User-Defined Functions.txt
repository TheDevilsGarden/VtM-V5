/*
################################################################################
## USER-DEFINED FUNCTIONS ######################################################

Allows the other systems to get up to speed quickly.



================================================================================
== statpath([<player>/]<stat>) ================================================

USER-DEFINED FUNCTION: STATPATH()

This function is simply an API-like function that allows a staffer-project to 
pull the raw "where would I find this stat" via the statname-lookup functions, 
and do some additional error checking.

0: As passed, will be broken apart.
Output: Full stat path or #-1 or whatever (via f.statpath.workhorse).

qp: Player to check.
qs: Stat to check.

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.statpath sfp=u\\( [num( sfp )]/f.statpath, \\\%0 \\)

// -----------------------------------------------------------------------------

&f.statpath sfp=

// Prime the registers. If it hurts your brain, it hurts mine too.
	[setq( s, )][setq( p, )]
	[setq( s, 
		if( 
			t( setr( s, rest( %0, / ))), 
			%qs[setq( p, before( %0, / ))], 
			%0 
		)
	)]

// Validate Input
	[case( 
		0, 
// .. staff-only
		isstaff( %@ ), 
		#-1 STAFF ONLY, 
// .. must have a stat to look up
		comp( %qs, ), 
		#-1 NEED STAT TO LOOK UP,  
// .. else call the Workhorse. If it hurts your brain, tough.
		ulocal( f.statpath.workhorse, %qs, %qp )
	)]


/*
--------------------------------------------------------------------------------
-- Statpath Workhorse ----------------------------------------------------------

0: Stat to check.
1: Player dbref of target, if any
Output: Full stat path or #-1 Whatever

qp: Dbref of player then of player's sheet

--------------------------------------------------------------------------------
*/

&f.statpath.workhorse sfp=

// If player, do the player dance, else do the dd-lookup dance.
// If player but player lookup failed, also do the dd-lookup dance.
	[if( 
		t( %1 ), 
// .. .. player error-checking
		case( 0, 
			t( setr( p, pmatch( %1 ))), 
			#-1 PLAYER NOT FOUND, 
			t( setr( p, u( f.find-sheet, %qp ))), 
			#-1 SHEET NOT FOUND, 
// .. .. .. okay, do the lookup
			setq( p, ulocal( f.statpath-lookup-sheet, %qp, %0 ))
		), 
// .. .. plain dd-lookup
		setq( p, ulocal( f.statpath-lookup-dd, %0 ))
	)]
	[if( 
// If dbref passed, and the player lookup failed...
		cand( t( %1 ), strmatch( %qp, #-* )), 
// .. try the dd lookup
		ulocal( f.statpath-lookup-dd, %0 ), 
// .. else output whatever we have
		%qp 
	)]



/*
================================================================================
== statname([<player>/]<stat>) =================================================

0: same as f.statpath
output: prettified Just-The-Stat-Name

qr: results of f.statpath

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.statname sfp=u\\( [num( sfp )]/f.statname, \\\%0 \\)

// -----------------------------------------------------------------------------

&f.statname sfp=
	if( 
		t( setr( r, u( f.statpath, %0 ))), 
// .. dd stat: send the name portion of the statpath
		u( f.statname.workhorse, rest( %qr, . )), 
// .. error: show what f.statpath handed us
		%qr 
	)


/*
--------------------------------------------------------------------------------
-- Statname Workhorse ----------------------------------------------------------

0: The "rest" of the statpath (that is, just the name portion)

*/

&f.statname.workhorse sfp=
	iter( 
// .. Step 1: Capitalize Words
		edit( %0, _, %b ), 
// .. Step 2: Capitalize Substats
		titlestr( %i0 ), 
		., 
		. 
	)


// -----------------------------------------------------------------------------
// -- Statname Tests -----------------------------------------------------------

think iter( iter( edit( a_b.c_d, _, %b ), capstr( ## ), ., .), capstr( ## ))

think statname( str )
think statname( cont.rep )
think statname( thenomain/cont.rep )
think statname( un( t ))
think statname( blah )




/*
================================================================================
== getstat(<player>/<stat>[, <statstuff>]) =====================================

Getstat is checked against f.statpath, which gets us 2/3rds of what we need.

<statstuff>: 
- [p]ermanent: return the first part, if numeric
- [o]ffset: return the second part, if first part is numeric
- [b]oth: return <perm>.<offset>
- [t]otal: default, return <perm> + <offset>

p, o, b and t are ignored if the stat is non-numeric.

--

0: <player>/<stat>
1: [p]ermanent, [o]ffset, [b]oth, [t]otal, if any

qp: <player>
qs: <stat>
qd: dbref of sheet

requires: isstaff(<dbref>)

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.getstat sfp=u\\( [num( sfp )]/f.getstat, \\\%0 , \\\%1 \\)

// -----------------------------------------------------------------------------

&f.getstat sfp=
	[setq( p, pmatch( before( %0, / )))]
	[setq( s, rest( %0, / ))]

	[case( 0, 
// the following may work without objeval(<wiz>, getstat(xx/yy))
// 	cor( isstaff( %@ ), strmatch( %qp, %# )), 
		isstaff( %@ ), 
		#-1 PERMISSION DENIED, 
		t( %qp ), 
		#-1 PLAYER NOT FOUND, 
		t( setr( d, u( f.find-sheet, %qp ))), 
		#-1 SHEET NOT FOUND, 
		t( %qs ), 
		#-1 STAT MUST BE PROVIDED, 
		u( f.getstat.workhorse, %qp, %qs, %qd, %1 )
	)]


/*
--------------------------------------------------------------------------------
-- Getstat Workhorse -----------------------------------------------------------

0: Player dbref
1: Stat to Get
2: Sheet Loc
3: [p]ermanent, [o]ffset, [b]oth, [t]otal, if any

qs: <stat path>, then <stat>'s location if character would have it
qd: <stat> details if on sheet
qc: class of <stat path>: numeric, string, list, flag

*/

&f.getstat.workhorse sfp=
	strcat( 
		setq( s, ulocal( f.statpath.workhorse, %1, %0 )), 
		setq( d, u( %2/_%qs )), 
		setq( c, ulocal( f.get-class, %qs )), 

		if( t( %qs ), 
// If Stat Location Valid & Found ...
			case( %qc, 
// Class: Flag (ignore %2, give 1/<null> for set/not set)
				flag, 
				ulocal( f.getstat.workhorse.flag, %0, _%qs ), 

// Class: String (ignore %3, give all)
				string, 
				ulocal( f.getstat.workhorse.string, %0, _%qs ), 

// Class: List (ignore %3, give all)
				list, 
				%qd, 

// Class: Number (follow %3's directive)
// .. first, convert 'derived' to value
				numeric, 
				strcat( 
					setq( d, ulocal( f.getstat.workhorse.numeric, %0, _%qs )), 
					switch(
						%3, 
						p*, first( %qd, . ), 
						o*, rest( %qd, . ), 
						b*, %qd, 
						t*, ladd( %qd, . ), 
						ladd( %qd, . )
					)
				), 
// Else: Panic and return full stat
				%qd
			), 
// .. Error Looking Up Stat
			%qs 
		)
	)


/*
--------------------------------------------------------------------------------
-- Getstat Numeric -------------------------------------------------------------

0: sheet dbref
1: _sheet statpath (to pull 'instance' from, if appropriate)
returns: value list

i: instance (if exists) with underscores
s: statpath without instance

uses: crumple() -- squish + trim

At the moment, we have no derived stats that require instance, but I'm adding 
this code to it at the moment, anyhow. You never know.

*/

&f.getstat.workhorse.numeric sfp=
	localize( strcat( 
	 	setq( i, crumple( before( rest( %1, %( ), %) ))), 
		setq( s, u( f.statpath-without-instance, trim( %1, b, _ ))), 
		iter( 
			get( %0/%1 ), 
			if( 
				strmatch( %i0, derived ), 
				ulocal( [u( d.data-dictionary )]/%qs, %0, %qi ), 
				%i0 
			), 
			., . 
		)
	))


/*
--------------------------------------------------------------------------------
-- Getstat String --------------------------------------------------------------

0: sheet dbref
1: _sheet statpath (to pull 'instance' from, if appropriate)
returns: value

i: instance (if exists) with underscores
s: statpath without instance

*/

&f.getstat.workhorse.string sfp=
	localize( strcat( 
	 	setq( i, crumple( before( rest( %1, %( ), %) ))), 
		setq( s, u( f.statpath-without-instance, trim( %1, b, _ ))), 
		if( 
			strmatch( get( %0/%1 ), derived ), 
			ulocal( [u( d.data-dictionary )]/%qs, %0, %qi ), 
			get( %0/%1 ) 
		)
	))


/*
--------------------------------------------------------------------------------
-- Getstat Flag ----------------------------------------------------------------

0: sheet dbref
1: _sheet statpath (to pull 'instance' from, if appropriate)
returns: value

i: instance (if exists) with underscores
s: statpath without instance

*/

&f.getstat.workhorse.flag sfp=
	localize( strcat( 
	 	setq( i, crumple( before( rest( %1, %( ), %) ))), 
		setq( s, u( f.statpath-without-instance, trim( %1, b, _ ))), 
		if( 
			strmatch( get( %0/%1 ), derived ), 
			ulocal( [u( d.data-dictionary )]/%qs, %0, %qi ), 
			hasattr( %0, %1 ) 
		)
	))



/*
--------------------------------------------------------------------------------
-- Getstat Tests ---------------------------------------------------------------
*/

think getstat( thenomain/willpower, both )
think getstat( thenomain/willpower max, both )

// General Test
think [statname(thenomain/cont.rep)]: [getstat(thenomain/cont.rep)]

think [iter(full name|c(sp)|athl|athl.quick|speed|kith|blah, --> 
	[ansi(c, statname(thenomain/##))]: [getstat(thenomain/##)], |, %r)]

// List and String Lookups
think getstat(thenomain/kith)
think getstat(thenomain/full name)

// Numeric Without Offset Lookup
think getstat(thenomain/str)
think getstat(thenomain/str, perm)
think getstat(thenomain/str, offset)
think getstat(thenomain/str, both)
think getstat(thenomain/str, total)

// Numeric With Offset Lookup
think getstat(thenomain/speed)
think getstat(thenomain/speed, perm)
think getstat(thenomain/speed, offset)
think getstat(thenomain/speed, both)
think getstat(thenomain/speed, total)

// Non-Numeric Lookup
think getstat(thenomain/cont.rep)
think getstat(thenomain/cont.rep, perm)
think getstat(thenomain/cont.rep, offset)
think getstat(thenomain/cont.rep, both)
think getstat(thenomain/cont.rep, total)



/*
================================================================================
== hastag?(<stat>, <tag.list>[, or|and]) =======================================

Or/Default: Does <stat> have a tag in <tag.list>? And: Does <stat> have all 
tags in <tag.list>?

0: stat
1: tag.list (not case sensitive)
2: or/and, if there. Assume or-check
output: 1 or 0 (invalid stat names will always return 0)

qs: stat path

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.hastag? sfp=u\\( [num( sfp )]/f.hastag?, \\\%0, \\\%1, \\\%2 \\)

// -----------------------------------------------------------------------------

&f.hastag? sfp=
	[setq( s, u( f.statpath.workhorse, %0 ))]
	
	[if( 
		t( %qs ), 
		u( f.hastag?.workhorse, u( f.statpath-without-instance, %qs ), %1, strmatch( %2, a* )), 
		0 
	)]


/*
--------------------------------------------------------------------------------
-- Hastag? Workhorse -----------------------------------------------------------

0: stat path
1: tag.list (not case sensitive)
2: 1 if "and", 0/null if "or"

qt: tags for stat
qb: boolean list of matches

--------------------------------------------------------------------------------
*/

&f.hastag?.workhorse sfp=
	[setq( t, lcstr( u( v( d.data-tags )/tags.%0 )))]
	[setq( b, iter( %1, match( %qt, ##, . ), . ))]

	[if( %2, 
// and-check
		land( %qb ), 
// else/default: or-check
		lor( %qb )
	)]


// -----------------------------------------------------------------------------
// -- Hastag? Tests ------------------------------------------------------------

think u( sfp/f.hastag?.workhorse, advantage.speed, derived )

think hastag?( speed, derived )
think hastag?( speed, derived.pool )
think hastag?( speed, derived.pool, and )



/*
================================================================================
== statvalidate(<stat>, <value>|default) =======================================

The point of this function is to take a statpath and a (possibly partial) 
value, or the value of "default", and return the full value if valid, #-1 if 
not.

UPDATE: Now we're adding list stats, <num>.<num>.<num> is valid input for 
class.<statpath>: list

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.statvalidate sfp=u\\( [num( sfp )]/f.statvalidate, \\\%0, \\\%1 \\)

// -----------------------------------------------------------------------------

&f.statvalidate sfp=
// .. strip instance from the statpath to pull value list directly from the DD
	[setq( s, u( f.statpath-without-instance, u( f.statpath.workhorse, %0 )))]
	[switch( 0, 
		1[@@(<is staff>)], #-1 STAFF ONLY, 
		t( %qs ), %qs, 
		u( f.statvalidate.workhorse, %qs, %1 )
	)]


/*
--------------------------------------------------------------------------------
-- Statvalidate Workhorse ------------------------------------------------------

0: stat path *without instance*
1: value|"default"
Output: closest valid match. if "default", default value

qs: stat's value validation list (grabbed from DD)
qc: stat's  class
qv: matched value, if any

*/

&f.statvalidate.workhorse sfp=
	localize( switch( 0, 

// error
		u( f.statvalue-good, %1 ), 
		#-1 VALUE CONTAINS ILLEGAL FORMAT, 

// 'default'
		comp( lcstr( %1 ), default ), 
		strcat( 
			setq( v, get( u( d.data-dictionary )/default.%0 )), 
			if( t( %qv ), 
				%qv, 
				@@( default of <null> will clear stat )
			)
		), 

// grab value
		strcat( 
			setq( s, first( get( u( d.data-dictionary )/%0 ), | )), 
			setq( c, ulocal( f.get-class, %0 )), 
			setq( v, 
				case( %qc, 

// flag: the value becomes the value on the data dictionary or <null>
					flag, 
					if( strmatch( %1, ), @@( <null> ), %qs ), 

// list: set-intersect as a cheap filter, will not name-complete
// .. (like setstat.workhorse, make space -> '.')
					list, 
					strcat( 
						setq( e, edit( %1, %b, . )), 
						setq( x, 
							iter( graball( %qe, !*, ., . ), 
								![grab( .%qs, [rest( %i0, ! )]*, . )], 
								., . 
							)
						), 
						setq( a, 
							iter( setdiff( %qe, %qx, . ), 
								grab( .%qs, %i0*, . ), 
								., . 
							)
						), 
						trim( squish( %qa.%qx, . ), b, . )
					), 

// other classes: grab the first match
					grab( %qs, %1*, . )
				)
			), 

// validate value
			case( %qs, 
// '*': Anything will do, return what was passed ( probably "string" class )
				*, 
				%1, 

// '#': Any number 1+
				#, 
				if( cand( gte( %1, 1 ), isint( %1 )), 
					%1, 
					#-1 VALUE NOT A POSITIVE INTEGER 
				), 
// else: other validations
				switch( 0, 
// .. passed null
					comp( %1,  ), 
					#-1 VALUE WAS NULL, 
// .. substats are implied '*'
					lt( words( %0, . ), 3 ), 
					%1, 
// .. requested value not in the list
					t( %qv ), 
					#-1 VALUE NOT FOUND, 
// .. else: return grabbed value
					%qv 
				)
			)
		)
	))


// -----------------------------------------------------------------------------
// -- Statvalidate Tests -------------------------------------------------------

@dolist 
	str:1 stren:pie court:s clarity:default init:default lang_(fr):1 cou_(s):2 
	cou(s):default acad.library:1={ 
		think >> set [setr( z, first( ##, : ))] to [setr( y, rest( ##, : ))] => 
		[escape( statvalidate( %qz, %qy ))] 
		[ansi( xh, %([lcstr( statpath( %qz ))]%) )] 
	}

think statvalidate( lang (fr), 1 )
think statvalidate( court (s), 1 )
think statvalidate( seeming, ele )
think statvalidate( acad.library, 1 )

think statvalidate( full name, Alee )
think statvalidate( full name, Alee` )
think statvalidate( full name, 10.Alee )

// "list" class examples

think statvalidate(rage, 1.3.47)



/*
================================================================================
== statvalidate?(<stat>, <value>) ==============================================

0: stat to validate
1: value to validate (not case sensitive)
output: 1 or 0 (invalid stat names and derived stats will always return 0)

Pushes through f.statvalidate, and that's it.
Probably not needed

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.statvalidate? sfp=u\\( [num( sfp )]/f.statvalidate?, \\\%0, \\\%1 \\)

// -----------------------------------------------------------------------------

&f.statvalidate? sfp=t( ulocal( f.statvalidate, %0, %1 ))



/*
================================================================================
== setstat(<player>/<stat>, <value>|default[, <behavior>]) =====================

Almost exactly like getstat() and possibly others, <behavior> is:

- [of]fset: set the second part, if stat is numeric
- [ov]erride: ignore validation & prerequisite checks for stat, set literally
- default: restore stat to default value, first part if numeric 

"Default" only has meaning for the permanent stat. 

Overwrites current values.

Text is determined by stat's current value.

NOTE THIS SOMEWHERE: Offsets must always be numeric, 0 = null = erase

--

0: player/[!]stat 					<--- I hate this now
1: value - if null, erase stat or reset default
2: [of]fset, [ov]erride validation

qp: player dbref
qw: where-is-sheet location (just to pass it along)
qs: stat path
qi: statpath without instance
qv: value to set, validated
qr: prerequisite checks

*/

@fo me=&ufunc.setstat sfp=u\\( [num( sfp )]/f.setstat, \\\%0, \\\%1, \\\%2 \\)

// -----------------------------------------------------------------------------

&f.setstat sfp=
	if( isstaff( %@ ), 
// Staff?  OK.
		strcat( 
			setq( p, pmatch( first( %0, / ))), 
			setq( w, u( f.find-sheet, %qp )), 
// statpath: If we can grab it from the player, great, else grab it from the dd.
			setq( s, 
				if( 
					setr( s, 
						ulocal( f.statpath.workhorse, rest( %0, / ), %qp )
					), 
					%qs, 
					ulocal( f.statpath.workhorse, rest( %0, / ))
				)
			), 
			setq( i, ulocal( f.statpath-without-instance, %qs )), 

// value validation
			setq( v, 
				switch( %2, 
// .. override - whatever we want
					ov*, 
					%1, 
// .. offset - must be numeric ( we check stat's class in workhorse )
					of*, 
					if( 
						or( isnum( %1 ), not( comp( %1,  ))), 
						%1, 
						#-1 Non-Numeric Offset
					), 
// .. normal - validate completely, if null then null, if default then default
					case( %1, 
						default, get( u( d.data-dictionary )/default.%qi ), 
						@@( null ), , 
						ulocal( f.statvalidate.workhorse, %qi, %1 )
					)
				)
			), 

// qr: prerequisites validation, 'template' and 'other' only
			setq( r, 
				case( 0, 
// .. always good if "override" is set
					not( strmatch( %2, ov* )), 
					1, 
// .. if template check is bad, pass error (always allow 'null')
					cor( 
						setr( r, u( f.prereq-check-template, %qw, %qi )), 
						strmatch( %qv, )
					), 
					%qr, 
// .. offset is bad for template (above) but good for other (below)
					not( strmatch( %2, of* )), 
					1, 
// .. if other check is bad, pass error
					t( setr( r, 
						u( f.prereq-check-other, 
							%qw, 
							%qi, 
							before( rest( %qs, %( ), %) ), 
// .. (stat being changed by...)
// .. (don't mess with if %qv is non-numeric)
							if( isnum( %qv ), 
// .. .. .. ( if numeric, find the change-by: 'qv - stat value' )
								sub( %qv, first( u( %qw/_%qs ), . )), 
								%qv
							)
						)
					)), 
					%qr, 

// .. else, all was good
					1 
				)
			), 

// >> make sure qp, qw, qs and qv are all good!
			switch( 0, 

				t( %qp ), 
				#-1 Player Not Found, 

// .. must have a template unless "override" switch
				or( t( get( %qw/_bio.template )), strmatch( %2, ov* )), 
				#-1 Sheet Template Not Found, 

				comp( rest( %0, / ),  ), 
				#-1 Stat Name May Not Be Null, 

// .. stat name check
				t( %qs ), %qs, 

// .. stat value check
				not( strmatch( %qv, #-* )), %qv, 

// .. stat prerequisite check
				t( %qr ), %qr, 

// .. else: good!
				u( f.setstat.workhorse, %qw, edit( %qs, %b, _ ), %qv, %2 )
			) 
		), 

// Calling object (not enactor) must pass isstaff().
		#-1 Not Staff 
	)


/*
--------------------------------------------------------------------------------
-- Setstat Workhorse -----------------------------------------------------------

0: Sheet Loc
1: Full Stat Path
2: <value> -- for 'flag' type, ignore %2 for setting, honor if <null>
3: [of]ffset  ([ov]veride may be passed, but ignored)

q0 - q3: regexp results
qd: <stat> details if on sheet, if any
qc: stat's class
qs: statpath, edited if class:list (to remove substat)
qf: first (permanent) value on %qd
qr: offset ("rest") on %qd, if any

qm: Message (since the 'set' message doesn't look like it's passed through.)
qv: processed value to set (if complex processing needs done, like lists)

qa: "add" these list items (for type:class only)
qu: "un-add" these list items (for type:class only)

* 'derived' for setstat, the [..] nonsense, no longer applies
   remember to remove this

--------------------------------------------------------------------------------
*/

&f.setstat.workhorse sfp=
	strcat( 
		setq( v, ), 
		setq( c, ulocal( f.get-class, %1 )), 

// .. oh yeah, if class:list + type.stat.substat, strip the substat
		if( 
			cand( 
				strmatch( %qc, list ), 
				strmatch( %1, *.*.* )
			), 
			setq( s, extract( %1, 1, 2, . )), 
			setq( s, %1 )
		), 
		setq( d, get( %0/_%qs )), 

// >> ( \[.*\] )( \..* )?|( .* ) -> <derived>.<substat> | <other>
//		setq( 0, 
//			regmatch( %qd, %( %\%[.*%\%]% )%( %\..*% )?|%( .*% ), 0 1 2 3 )
//		), 
//		if( 
//			t( %q3 ), 
//			[setq( f, first( %qd, . ))][setq( r, rest( %qd, . ))], 
//			[setq( f, %q1 )][setq( r, rest( %q2, . ))]
//		), 
		setq( f, first( %qd, . )), 
		setq( r, rest( %qd, . )), 

		setq( m, case( 1, 
// >> switch is "offset", replace remove or set - "numeric" type only.
			strmatch( %3, of* ), 
			case( 0, 
// .. .. stat class is not "numeric", deny offset
				strmatch( %qc, numeric ), 
				#-1 CANNOT OFFSET NON-NUMERIC STAT, 
// .. .. offset is null or 0 = erase offset
				and( comp( %2, ), neq( %2, 0 )), 
				set( %0, _%qs:%qf ), 
// .. .. stat doesn't exist, set 0.<offset>
				comp( %qf, ), 
				set( %0, _%qs:0.%2 ), 
// .. .. else set <perm>.<offset>
				set( %0, _%qs:%qf.%2 )
			), 
// >> switch is "override", replace the whole thing without checking anything
			strmatch( %3, ov* ), 
			set( %0, _%qs:%2 ), 
// >> value is null, erase stat ( this could be in the "else", too )
			not( comp( %2, )), 
			set( %0, _%qs: ),
// >> stat class is "numeric", replace permanent
			strmatch( %qc, numeric ), 
			set( %0, _%qs:%2[if( %qr, .%qr )] ), 
// >> stat class is "list", set or un-set ( !value ) each item in list
// .. right now, lists may be space-delimited, editing space to .
			strmatch( %qc, list ), 
			[setq( v, edit( %2, %b, . ))]
			[setq( u, graball( %qv, !*, ., . ))]
			[setq( a, setdiff( %qv, %qu, . ))]
			[setq( u, edit( %qu, !, ))]
// .. .. qv: remove the remove stuff then add the add stuff
			[setq( v, setunion( setdiff( %qd, %qu, . ), %qa, . ))]
			[set( %0, _%qs:%qv )], 
// >> else, replace all
			set( %0, _%qs:%2 )
		)), 

// Display
		case( 1, 

// error from 'set()'
			comp( %qm, ), %qm, 

// 
			t( setr( v, if( t( %qv ), %qv, %2 ))), 
			strcat( 
				Set, %b, 
				ulocal( f.statname.workhorse, rest( %qs, . )), 
				if( strmatch( %3, of* ), %boffset ), 
				if( not( strmatch( %qc, flag )), 
					%bto '%qv'
				), .
			), 
			strcat( 
				Unset, %b, 
				ulocal( f.statname.workhorse, rest( %qs, . )), 
				if( strmatch( %3, of* ), %boffset ), . 
			)
		)
	)


// -----------------------------------------------------------------------------
// -- Setstat Tests ------------------------------------------------------------
// thenomain, my test frob.

// ---
// Start by cleaning the slate

think [setstat(thenomain/willpower_maximum, default)] 
think willpower max -> [getstat(thenomain/willpower_maximum, both)] 

think [setstat(thenomain/willpower, default)] 
think willpower -> [getstat(thenomain/willpower, both)] 

think [setstat(thenomain/willpower max, 2, off)] -> 
	[getstat(thenomain/willpower max, b)]

think [setstat(thenomain/willpo, 2, off)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, 7, override)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// --

think [setstat(thenomain/willpo, 0, offset)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// set the offset, change the derived stat to just "5", reset the default
think [setstat(thenomain/willpo, 2, off)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, 5, override)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// clear the stat entirely and try to set an offset
think [setstat(thenomain/willpo, , overr)] -> [getstat(thenomain/willp, b)]
think [setstat(thenomain/willpo, 2, off)] -> [getstat(thenomain/willp, b)]

// Restore
think [setstat(thenomain/willpo, default)] -> [getstat(thenomain/willp, b)]

// ---
// Let's play with Academics
think [setstat(thenomain/acad, 2)] -> [getstat(thenomain/acad, b)]

// Try to set a default on a stat that doesn't have one
think [setstat(thenomain/acad, default)] -> [getstat(thenomain/acad, b)]

// Okay, let's clear it.
think [setstat(thenomain/acad)] -> [getstat(thenomain/acad, b)]

// We can give someone a specialty without a stat.
think [setstat(thenomain/acad.history, 1)] -> 
	[getstat(thenomain/acad.history, b)]

// But not for stats that won't allow specialties/secondaries
think [setstat(thenomain/strength.history, 1)]

// Restore Academics to normal
think [setstat(thenomain/acad)] -> [getstat(thenomain/acad, b)]
think [setstat(thenomain/acad.history)] -> [getstat(thenomain/acad.history, b)]



/*
================================================================================
-- shiftstat(<stat>, <value>[, <option>]) -----------------------------------

<option>:
	offset: Increase the offset
	override: Ignore the stat limitations, still must be numeric

validate stat path
validate stat may end as <current> + <value>, unless override
basically getstat + setstat

0: player/stat
1: value (must be non-zero numeric)
2: option ([of]fset, [ov]erride)

qp: player dbref
qw: where-is-sheet location (just to pass it along)
qs: stat path
qc: stat class (numeric, string, list - we only accept numeric, here)
qv: value to shift by, validated
qa: amount to offset by
qr: prerequisites check, 'template' and 'other' only

--------------------------------------------------------------------------------
*/

@fo me=&ufunc.shiftstat sfp=u\\( [num( sfp )]/f.shiftstat, \\\%0, \\\%1, \\\%2 \\)

// -----------------------------------------------------------------------------

&f.shiftstat sfp=
	[setq( p, pmatch( first( %0, / )))]
	[setq( w, u( f.find-sheet, %qp ))]

// Statpath: If we can grab it from the player, great, else grab it from the dd.
// (Note: "first()" is there in case they're trying to set multiple stats)
	[setq( s, 
		if( 
			setr( s, u(f.statpath.workhorse, rest( %0, / ), %qp )), 
			%qs, 
			u( f.statpath.workhorse, rest( %0, / ))
		)
	)]
	[setq( c, ulocal(f.get-class, %qs ))]
	[setq( v, 
		if( 
			cand( isnum( %1 ), neq( %1, 0 )), 
			trim( %1, l, + ), 
			#-1 SHIFT MUST BE NON-ZERO NUMERIC 
		)
	)]

// pre-requisites validation, 'template' and 'other' only
	[setq( r, 
		case( 0, 
			not( strmatch( %2, ov* )), 1, 
			t( setr( r, u( f.prereq-check-template, %qw, %qi ))), %qr, 
			t( setr( r, 
				u( 
					f.prereq-check-other, 
					%qw, 
					%qi, 
// >> the line below is the 'instance' for that stat
					before( rest( %qs, %( ), %) ), 
					%qv 
				)
			)), 
			%qr, 
			1 
		)
	)]

	[switch( 0, 
		isstaff( %@ ), #-1 Staff Only, 
		t( %qp ), #-1 Player Not Found, 
		t( get( %qw/_bio.template )), #-1 Sheet Template Not Found, 
		comp( rest( %0, /), ), #-1 Stat Name May Not Be Null, 
		t( %qs ), %qs, 
		strmatch( %qc, numeric ), #-1 Stat Class Must Be Numeric, 
		t( %qv ), %qv, 
		t( %qr ), %qr, 
		u( f.shiftstat.workhorse, %qw, %qs, %qv, %2 )
	)]


/*
--------------------------------------------------------------------------------
-- Shiftstat Workhorse ---------------------------------------------------------

0: sheet location
1: statpath
2: amount to inc/dec
3: [of]fset, [ov]erride

qd: current stat details
qf: first portion of stat (permanent)
qr: rest of stat (offset)
qa: sum of %qf and %2, if 0 then <null> (to erase value with setstat)
qi: statpath without instance (because of the validate system)
qc: stat class (must be numeric)

--------------------------------------------------------------------------------
*/

&f.shiftstat.workhorse sfp=
	localize( 
		[setq( d, u( %0/_%1 ))]
		[setq( f, first( %qd, . ))]
		[setq( r, rest( %qd, . ))]
		[setq( a, if( setr( a, add( %qf, %2 )), %qa, ))]
		[setq( i, u( f.statpath-without-instance, %1 ))]
		[setq( c, u( f.get-class, %1 ))]

		[case( 1, 
			not( strmatch( %qc, numeric )), 
			#-1 STAT CLASS MUST BE NUMERIC, 

			strmatch( %3, ov* ), 
			ulocal( f.setstat.workhorse, %0, %1, %qa, ov ), 

			strmatch( %3, of* ), 
			ulocal( f.setstat.workhorse, %0, %1, add( %qr, %2 ), of ), 

// >> not offset nor override, so check if primary value is 'derived'
			strmatch( %qf, derived ), 
			#-1 CANNOT SHIFT DERIVED STAT WITHOUT OVERRIDE, 

// >> check validation for primary value
			not( t( ulocal( f.statvalidate.workhorse, %qi, %qa ))), 
			#-1 SHIFT MAKES STAT INVALID, 

// >> set that stat!
			ulocal( f.setstat.workhorse, %0, %1, %qa )
		)] 
	)


// -----------------------------------------------------------------------------
// -- Shiftstat Tests ----------------------------------------------------------

think [shiftstat(thenomain/strength, 1)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/stren, 1, off)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/strength, -1)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/stren, 0, off)] -> [getstat(thenomain/strength, b)]
think [shiftstat(thenomain/stre, -1, off)] -> [getstat(thenomain/strength, b)]

think setstat(thenomain/full name, Jack Fireheart)
think [shiftstat(thenomain/full name, Jack Fireheart)] -> [getstat(thenomain/full name)]
think [shiftstat(thenomain/full name, 4)] -> [getstat(thenomain/full name)]
think setstat(thenomain/full name, )
think [shiftstat(thenomain/full name, 4)] -> [getstat(thenomain/full name)]
