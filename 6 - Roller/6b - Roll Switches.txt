################################################################################
## ROLL SWITCHES ###############################################################

Multiple switches may be given (and, of course, taken out).  Each system adds to what's being rolled and will probably depend upon the dice-to-roll part of it being parsed first.

Spaces may not be in any switch.  Name completion will do its best.

Active Switches (do their own thing):
	/again=<again type> - roll different types of n-again
		/<number>[-again]
		/no[-again]
		/weakness
	/willpower - spend a willpower for +3


'Weakness' is a term half made-up from the Vampire book, indicating some clans' 
weaknesses reminiscent of oWoD's success counter: After counting successes, 
subtract 1s. 'Weakness' is also always 'no-again'.


Passive Switches (used in other parts of the roller):
	/tr[ained] - ignore untrained modifiers
	/now[ound] - ignore wound penalties
	/rote - roll as a rote (failures re-rolled once)


According to the printed literature that I could find, 'rote' is processed 
before all n-again rolls, including weakness. This means weakness + rote could 
take a normal failure ('2') and turn it into a success-eating '1'.

It is what it is.



================================================================================
== Data ========================================================================


--------------------------------------------------------------------------------
-- Switch Aliases --------------------------------------------------------------

Remember to process switch matches before this. 
'/nowound' should match before '/now' and before '/no'.
Wildcards are valid.

	<full switch>:<alias>:<alias>:<alias> <full switch 2>:...

--

&d.switch.passives nWoD Roller <nr>=
	nowound 
	trained 
	weakness 
	rote 

--
	
&d.switch.aliases nWoD Roller <nr>=
	10-again|again=10 
	9-again|again=9 
	8-again|again=8 
	no-again|again=no 
	11-again|again=no 



================================================================================
== Functions ===================================================================


--------------------------------------------------------------------------------
-- Name Complete Switches ------------------------------------------------------

Take the switch list /x/w=m/r/g/r and name-complete it.

0: list/of/switches
returns: name-completed and alias-fixed list/of/switches

a: list of switches as known by the attributes
b: hey it matched

x: the switch
y: the switch modifier (after '=')

--

&f.switch.name-complete nWoD Roller <nr>=
localize( 
	iter( lcstr( trim( %0, l, / )), 
		strcat( 
			setq( a, lcstr( sort( edit( lattr( %!/f.roll/* ), F.ROLL/, )))), 
			setq( x, before( %i0, = )), 
			setq( y, rest( %i0, = )), 
			case( 1, 
				t( setr( b, grab( %qa, %qx* ))), 
				/%qb[if( strlen( %qy ), =%qy )], 

				t( setr( b, grab( v( d.switch.passives ), %qx* ))), 
				/%qb[if( strlen( %qy ), =%qy )], 

				t( setr( b, rest( grab( v( d.switch.aliases ), %qx*|* ), | ))), 
				/%qb[if( words( %qy ), =%qy )] 
			)
		), 
		/, @@ 
	)
)

--

think u( nr/f.switch.name-complete, 8/w/no/dsfds/no-/ag=5/t/tr/fd )

think [setr( z, /w/tr/e/ta=15 )] --> [setq( z, u( nr/f.switch.name-complete, %qz ))]%qz

This being more what it should probably look like when we're done.


--------------------------------------------------------------------------------
-- GetSwitch -------------------------------------------------------------------

Passive switches are used in other parts of the system, usually to stop them 
from working, or to cause them to work a little differnetly.  For them, the 
/whole/switch/list is passed, as well as the item to check.  Yeah, it's pretty 
simple.

CODE NOTE: This works just like grab(%0, %1*, /).  The reason it works is 
because the list is <null>/item1/item2/item3, so searching for * returns the 
<null>.  This is VERY USEFUL.

0: partial name of switch to check for
returns: the full item

--

&f.getswitch nWoD Roller <nr>=
	regrabi(%qz, ^%0, /)


--------------------------------------------------------------------------------
-- HasSwitch? ------------------------------------------------------------------

0: partial name of switch to check for
returns: 1 for true, 0 for false (null returns false)

--

&f.hasswitch? nWoD Roller <nr>=
	t(u(f.getswitch, %0))



================================================================================
== /again ======================================================================

/again=10, 9, 8.  7 is 8 + 2 dice, 6 is 8 + 4 dice, and so on.
/again=no, converts to 11.
/again=weakness, rolls the weakness system.

0: /again=xxx
q0: the "again" type

--

&f.roll/again nWoD Roller <nr>=

	[setq(0, rest(%0, =))]
	[case(
		1, 
@@ .. check an "again" type was actually passed
		not(t(%q0)), 
		u(f.registers.error-add, Again type not passed.), 
@@ .. "w"eakness
		strmatch(%q0, w*), 
		[setq(a, 11)]
		[setq(s, Weakness)], 
@@ .. "n"o
		strmatch(%q0, n*), 
		setq(a, 11), 
@@ .. must be at least 5 and integer
		not(and(isint(%q0), gte(%q0, 7))), 
		u(f.registers.error-add, Again type must be integer of 7 or higher.), 
@@ .. if below 8, +2 dice per
		lt(%q0, 8), 
		[setq(1, mul(2, sub(8, %q0)))]
		[u(f.registers.dice-add, %q1)]
		[u(f.registers.output-add, %q1 %(%q0-again%), +)]
		[setq(a, 8)], 
@@ .. else just set
		setq(a, %q0)
	)]

--

&f.roll/9-again #59=u( f.roll/again, /again=9 )
&f.roll/8-again #59=u( f.roll/again, again=8 )



================================================================================
== /extended[=<num>] ===========================================================

/extended[=<rolls>] will roll either pool- or <rolls>-number-of-times.

Extended to xx rolls: /extended[=<num>]
Extended to target: /target=<num>
Extended to whichever is first: /extended[=<num>]/target=<num>.

Remember, this switch doesn't activate the rolls, but modifies them.

--

0: /extended[=<num>]
q0: the "extended" value, if any
qt: a GLOBAL REGISTER for number of times to roll

--

&f.roll/extended nWoD Roller <nr>=
@@ .. if <num> is there, %q0 = <num>, else %q0 = %qt
@@ .. this may be redundant, but allows us to check <num> and %qt 
@@ .. with the same code
	[setq(0, if(strmatch(%0, *=*), rest(%0, =), %qt))]

	[case(0, 
@@ .. checks if both %qt and %q0 fail
		or(t(%qt), t(rest(%0, =))), 
		u(f.registers.error-add, If no traits in the roll%, you must use /extended=<num>), 
@@ .. <num> must be > 0 (catches "null")
		gt(%q0, 0), 
		u(f.registers.error-add, Extended roll must be a number of times), 
@@ .. <num> must be int
		isint(%q0), 
		u(f.registers.error-add, Extended roll must be an integer), 
@@ .. else, set %q0 into %qt
		setq(t, %q0)
	)]

--

think %%qt: [setr(t, 4)] - [u(#41/f.roll/extended, /extended)] - errors: %qe - total rolls: %qt
think %%qt: [setr(t, 4)] - [u(#41/f.roll/extended, /extended=2)] - errors: %qe - total rolls: %qt

think %%qt: [setr(t, 0)] - [u(#41/f.roll/extended, /extended)] - errors: %qe - total rolls: %qt
think %%qt: [setr(t, 4)] - [u(#41/f.roll/extended, /extended=)] - errors: %qe - total rolls: %qt



================================================================================
== /target=<num> ===============================================================

/target=<target> will roll until <target> successes are reached.

Extended to xx rolls: /extended[=<num>]
Extended to target: /target=<num>
Extended to whichever is first: /extended[=<num>]/target=<num>.

Remember, this switch doesn't activate the rolls, but modifies them.

--

0: /target=<num>
q0: the "target" value
qt: a GLOBAL REGISTER for number of times to roll

